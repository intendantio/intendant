"use strict";var _configuration=_interopRequireDefault(require("../configuration.json")),_core=_interopRequireDefault(require("@intendant/core/__mocks__/core")),_package=_interopRequireDefault(require("../package.json"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}let settings={id:"DEVICE",client:"CLIENT_ID",secret:"SECRET_ID",domain:"jest.jest"};describe(_package.default.name,()=>{/* @intendant/smartobject */ /* @intendant/nous-plug-smartobject */ /* getAccessToken */ /* turnOn */ /* turnOff */ /* getState */beforeEach(()=>jest.resetModules()),test("action success",async()=>{let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("test",{message:"test-jest"});expect(c).toEqual({package:_package.default.name,data:{}})}),test("action not found",async()=>{let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("test-no-found",{message:"test-jest"});expect(c).toEqual({package:_package.default.name,message:"Action not found 'test-no-found'"})}),test("action throw",async()=>{let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("test",{message:"test-jest",throw:!0});expect(c).toEqual({package:_package.default.name,message:"An error has occurred when test '\"test-error\"'"})}),test("action success > getAccessToken",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({success:!0,result:{access_token:"jest_access"}}),status:200}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.getAccessToken({});expect(c).toEqual({package:_package.default.name,error:!1,message:"",access:"jest_access"})}),test("action error status  > getAccessToken",async()=>{jest.mock("node-fetch",()=>async()=>({status:500}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.getAccessToken({});expect(c).toEqual({package:_package.default.name,error:!0,message:"Invalid status 500"})}),test("action error request > getAccessToken",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({success:!1,package:_package.default.name,msg:"jest-error-msg"}),status:200}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.getAccessToken({});expect(c).toEqual({package:_package.default.name,error:!0,message:"Invalid result jest-error-code : jest-error-msg"})}),test("action success > turnOn",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({success:!0,result:{}}),status:200}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default);b.getAccessToken=()=>({error:!1,package:_package.default.name,message:"",access:""});let c=await b.action("turnOn",{color:"#88001b",birghtness:200});expect(c).toEqual({package:_package.default.name,error:!1,message:"",data:{}})}),test("action error status > turnOn",async()=>{jest.mock("node-fetch",()=>async()=>({status:500}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default);b.getAccessToken=()=>({error:!1,package:_package.default.name,message:"",access:""});let c=await b.action("turnOn",{});expect(c).toEqual({package:_package.default.name,error:!0,message:"Invalid status 500"})}),test("action error request > turnOn",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({success:!1,package:_package.default.name,msg:"jest-error-msg"}),status:200}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default);b.getAccessToken=()=>({error:!1,package:_package.default.name,message:"",access:""});let c=await b.action("turnOn",{});expect(c).toEqual({package:_package.default.name,error:!0,message:"Invalid result jest-error-code : jest-error-msg"})}),test("action success > turnOff",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({success:!0,result:{}}),status:200}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default);b.getAccessToken=()=>({error:!1,package:_package.default.name,message:"",access:""});let c=await b.action("turnOff",{});expect(c).toEqual({package:_package.default.name,error:!1,message:"",data:{}})}),test("action error status > turnOff",async()=>{jest.mock("node-fetch",()=>async()=>({status:500}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default);b.getAccessToken=()=>({error:!1,package:_package.default.name,message:"",access:""});let c=await b.action("turnOff",{});expect(c).toEqual({package:_package.default.name,error:!0,message:"Invalid status 500"})}),test("action error request > turnOff",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({success:!1,package:_package.default.name,msg:"jest-error-msg"}),status:200}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default);b.getAccessToken=()=>({error:!1,package:_package.default.name,message:"",access:""});let c=await b.action("turnOff",{});expect(c).toEqual({package:_package.default.name,error:!0,message:"Invalid result jest-error-code : jest-error-msg"})}),test("action success > getState",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({success:!0,result:{}}),status:200}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default);b.getAccessToken=()=>({error:!1,package:_package.default.name,message:"",access:""});let c=await b.action("getState",{});expect(c).toEqual({package:_package.default.name,error:!1,message:"",data:{}})}),test("action error status > getState",async()=>{jest.mock("node-fetch",()=>async()=>({status:500}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default);b.getAccessToken=()=>({error:!1,package:_package.default.name,message:"",access:""});let c=await b.action("getState",{});expect(c).toEqual({package:_package.default.name,error:!0,message:"Invalid status 500"})}),test("action error request > getState",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({success:!1,package:_package.default.name,msg:"jest-error-msg"}),status:200}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default);b.getAccessToken=()=>({error:!1,package:_package.default.name,message:"",access:""});let c=await b.action("getState",{});expect(c).toEqual({package:_package.default.name,error:!0,message:"Invalid result jest-error-code : jest-error-msg"})})});