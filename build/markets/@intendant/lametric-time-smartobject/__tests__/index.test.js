"use strict";var _configuration=_interopRequireDefault(require("../configuration.json")),_core=_interopRequireDefault(require("@intendant/core/__mocks__/core")),_package=_interopRequireDefault(require("../package.json"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}let settings={id:"1",path:"fakeip",apikey:"apikey"};describe(_package.default.name,()=>{/* @intendant/smartobject */ /* @intendant/hue-switch-smartobject */ /* getAllNotification */ /* getCurrentNotification */ /* getOneNotification */ /* getVolume */ /* updateVolume */ /* getState */ /* getWifi */ /* deleteOneNotification */ /* sendNotification */ /* getIcons */beforeEach(()=>jest.resetModules()),test("action success",async()=>{let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("test",{message:"test-jest"});expect(c).toEqual({package:_package.default.name,data:{}})}),test("action not found",async()=>{let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("test-no-found",{message:"test-jest"});expect(c).toEqual({package:_package.default.name,message:"Action not found 'test-no-found'"})}),test("action throw",async()=>{let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("test",{message:"test-jest",throw:!0});expect(c).toEqual({package:_package.default.name,message:"An error has occurred when test '\"test-error\"'"})}),test("action success > getAllNotification",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({}),status:200}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("getAllNotification",{});expect(c).toEqual({package:_package.default.name,error:!1,message:"",data:{}})}),test("action error status > getAllNotification",async()=>{jest.mock("node-fetch",()=>async()=>({status:500}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("getAllNotification",{});expect(c).toEqual({package:_package.default.name,error:!0,message:"Invalid status 500"})}),test("action success > getCurrentNotification",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({}),status:200}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("getCurrentNotification",{});expect(c).toEqual({package:_package.default.name,error:!1,message:"",data:{}})}),test("action error status > getCurrentNotification",async()=>{jest.mock("node-fetch",()=>async()=>({status:500}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("getCurrentNotification",{});expect(c).toEqual({package:_package.default.name,error:!0,message:"Invalid status 500"})}),test("action success > getOneNotification",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({}),status:200}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("getOneNotification",{notification:1});expect(c).toEqual({package:_package.default.name,error:!1,message:"",data:{}})}),test("action error missing notification > getOneNotification",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({}),status:200}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("getOneNotification",{});expect(c).toEqual({error:!0,package:_package.default.name,message:"Missing notification"})}),test("action error status > getOneNotification",async()=>{jest.mock("node-fetch",()=>async()=>({status:500}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("getOneNotification",{notification:1});expect(c).toEqual({package:_package.default.name,error:!0,message:"Invalid status 500"})}),test("action success > getVolume",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({}),status:200}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("getVolume",{});expect(c).toEqual({package:_package.default.name,error:!1,message:"",data:{}})}),test("action error status > getVolume",async()=>{jest.mock("node-fetch",()=>async()=>({status:500}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("getVolume",{notification:1});expect(c).toEqual({package:_package.default.name,error:!0,message:"Invalid status 500"})}),test("action success > updateVolume",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({}),status:200}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("updateVolume",{});expect(c).toEqual({package:_package.default.name,error:!1,message:"",data:{}})}),test("action success with volume > updateVolume",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({}),status:200}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("updateVolume",{volume:30});expect(c).toEqual({package:_package.default.name,error:!1,message:"",data:{}})}),test("action error status > updateVolume",async()=>{jest.mock("node-fetch",()=>async()=>({status:500}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("updateVolume",{notification:1});expect(c).toEqual({package:_package.default.name,error:!0,message:"Invalid status 500"})}),test("action success > getState",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({}),status:200}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("getState",{});expect(c).toEqual({package:_package.default.name,error:!1,message:"",data:{}})}),test("action error status > getState",async()=>{jest.mock("node-fetch",()=>async()=>({status:500}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("getState",{});expect(c).toEqual({package:_package.default.name,error:!0,message:"Invalid status 500"})}),test("action success > getWifi",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({}),status:200}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("getWifi",{});expect(c).toEqual({package:_package.default.name,error:!1,message:"",data:{}})}),test("action error status > getWifi",async()=>{jest.mock("node-fetch",()=>async()=>({status:500}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("getWifi",{});expect(c).toEqual({package:_package.default.name,error:!0,message:"Invalid status 500"})}),test("action success > deleteOneNotification",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({}),status:200}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("deleteOneNotification",{notification:1});expect(c).toEqual({package:_package.default.name,error:!1,message:"",data:{}})}),test("action error missing notification > deleteOneNotification",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({}),status:200}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("deleteOneNotification",{});expect(c).toEqual({error:!0,package:_package.default.name,message:"Missing notification"})}),test("action error status > deleteOneNotification",async()=>{jest.mock("node-fetch",()=>async()=>({status:500}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("deleteOneNotification",{notification:1});expect(c).toEqual({package:_package.default.name,error:!0,message:"Invalid status 500"})}),test("action success > sendNotification",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({}),status:200}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("sendNotification",{});expect(c).toEqual({package:_package.default.name,error:!1,message:"",data:{}})}),test("action success > sendNotification",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({}),status:201}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("sendNotification",{});expect(c).toEqual({package:_package.default.name,error:!1,message:"",data:{}})}),test("action error status > sendNotification",async()=>{jest.mock("node-fetch",()=>async()=>({status:500}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("sendNotification",{});expect(c).toEqual({package:_package.default.name,error:!0,message:"Invalid status 500"})}),test("action success > getIcons",async()=>{jest.mock("node-fetch",()=>async()=>({json:async()=>({}),status:200}));let a=require("../index"),b=new a(settings,_core.default,_configuration.default),c=await b.action("getIcons",{});expect(c).toEqual({package:_package.default.name,error:!1,message:"",data:{}})})});