"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _package=_interopRequireDefault(require("./package.json")),_nodeSchedule=_interopRequireDefault(require("node-schedule"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}class Reminder{constructor(a){this.core=a,this.instances=new Map,this.prepare()}async prepare(){let a=await this.core.controller.storage.getItem(_package.default.name);a.error?this.core.logger.warning(_package.default.name,a.message):!1==a.data?await this.core.controller.storage.setItem(_package.default.name,[]):Array.isArray(a.data)?a.data.forEach(a=>{this.instanciate(a)}):await this.core.controller.storage.setItem(_package.default.name,[])}instanciate(a){return this.instances.has(a.reference)?{error:!1,package:_package.default.name,message:""}:(this.core.logger.verbose(_package.default.name,"Instanciate "+a.reference+" at cron "+a.cron),this["job-"+a.reference]=_nodeSchedule.default.scheduleJob(a.cron,async()=>{if(this.core.logger.verbose(_package.default.name,"Execution job "+a.reference),!1==a.repeating){this.core.logger.verbose(_package.default.name,"Remove job "+a.reference),this.instances.delete(a.reference),this["job-"+a.reference].cancel();let b=await this.core.controller.storage.getItem(_package.default.name);b.data=b.data.filter(b=>b.reference!=a.reference),await this.core.controller.storage.setItem(_package.default.name,b.data)}let b=await this.core.controller.client.getAll(),c=b.data.map(a=>a.token);await this.core.controller.notification.notify("Intendant",a.information,c)}),this.instances.set(a.reference,!0),{error:!1,package:_package.default.name,message:""})}async __create(a={}){try{if("string"==typeof a.reference&&"string"==typeof a.information&&"string"==typeof a.cron){a.repeating=!!a.repeating&&a.repeating;let b=await this.core.controller.storage.getItem(_package.default.name);return b.error?b:(b.data.push(a),await this.core.controller.storage.setItem(_package.default.name,b.data),this.instanciate(a))}return this.core.logger.warning(_package.default.name,"Missing is settings"),{error:!0,package:_package.default.name,message:"Missing is settings"}}catch(a){return this.core.logger.warning(_package.default.name,a.toString()),{error:!0,package:_package.default.name,message:"Throw exception"}}}async __getOne(a={}){let b=await this.core.controller.storage.getItem(_package.default.name+"/"+a.reference);if(b.error)return b;let c=b.data;return!1==c?{package:_package.default.name,message:"Reminder with reference "+a.reference+" is not found",error:!0}:{package:_package.default.name,message:"",error:!1,data:c}}async __getAll(a={}){let b=await this.core.controller.storage.getItem(_package.default.name);return{package:_package.default.name,message:"",error:!1,data:b.data}}async __removeOne(a={}){try{if(this.instances.has(a.reference)){this["job-"+a.reference].cancel();let b=await this.core.controller.storage.getItem(_package.default.name);return b.data=b.data.filter(b=>b.reference!=a.reference),await this.core.controller.storage.setItem(_package.default.name,b.data),this.instances.delete(a.reference),this.core.logger.verbose(_package.default.name,"Remove job "+a.reference),{error:!1,package:_package.default.name,message:""}}return{error:!0,package:_package.default.name,message:"Reminder not found"}}catch(a){let b=_package.default.name+" "+JSON.stringify(a.toString());return this.core.logger.error(_package.default.name,b),{error:!0,package:_package.default.name,message:"Internal error server : "+JSON.stringify(a.toString())}}}}var _default=Reminder;exports.default=_default,module.exports=exports.default;