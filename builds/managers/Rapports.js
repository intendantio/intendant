"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _Routine=_interopRequireDefault(require("../instances/Routine")),_package=_interopRequireDefault(require("../package")),_connector=_interopRequireDefault(require("../connector")),_Tracing=_interopRequireDefault(require("../utils/Tracing")),_Result=_interopRequireDefault(require("../utils/Result")),_StackTrace=_interopRequireDefault(require("../utils/StackTrace")),ToadScheduler=_interopRequireWildcard(require("toad-scheduler")),_nodeSchedule=_interopRequireDefault(require("node-schedule")),_Manager=_interopRequireDefault(require("./Manager"));function _getRequireWildcardCache(a){if("function"!=typeof WeakMap)return null;var b=new WeakMap,c=new WeakMap;return(_getRequireWildcardCache=function(a){return a?c:b})(a)}function _interopRequireWildcard(a,b){if(!b&&a&&a.__esModule)return a;if(null===a||"object"!=typeof a&&"function"!=typeof a)return{default:a};var c=_getRequireWildcardCache(b);if(c&&c.has(a))return c.get(a);var d={},e=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var f in a)if("default"!=f&&Object.prototype.hasOwnProperty.call(a,f)){var g=e?Object.getOwnPropertyDescriptor(a,f):null;g&&(g.get||g.set)?Object.defineProperty(d,f,g):d[f]=a[f]}return d.default=a,c&&c.set(a,d),d}function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}class Rapport extends _Manager.default{constructor(a){super(),this.core=a,this.configuration=this.core.configuration,this.instances=new Map,this.scheduler=new ToadScheduler.ToadScheduler,_Tracing.default.verbose(_package.default.name,"Rapport manager : start")}async before(){let a=await this.core.controller.rapport.getAll();return a.error?a:void a.data.forEach(a=>{if(!1==this.instances.has(a.id)){_Tracing.default.verbose(_package.default.name,"Rapport manager : instanciate rapport n\xB0"+a.id);let b=new ToadScheduler.Task(a.id.toString(),async()=>{this.executeAction(a)});this.executeAction(a),this.scheduler.addSimpleIntervalJob(new ToadScheduler.SimpleIntervalJob({seconds:a.interval},b,"intendant_rapport_"+a.id)),this.instances.set(a.id,a)}})}async delete(a){return a=parseInt(a),this.instances.has(a)?(_Tracing.default.verbose(_package.default.name,"Rapport manager : delete instance rapport n\xB0"+a),this.scheduler.removeById("intendant_rapport_"+a),this.instances.delete(a),new _Result.default(_package.default.name,!1,"")):new _Result.default(_package.default.name,!0,"Rapport instance not found")}async executeAction(a){_Tracing.default.verbose(_package.default.name,"Rapport manager : execute rapport n\xB0"+a.id);let b=await this.core.controller.rapport.getOne(a.id);if(b.error)return b;let c=b.data,d=await this.core.controller.widget.getPackageName(c.type,c.object);if(d.error)return d;let e=d.data,f={};c.settings.forEach(a=>{switch(a.type){case"string":f[a.reference]=a.value;break;case"integer":f[a.reference]=parseInt(a.value);break;case"boolean":f[a.reference]=!("true"!=a.value);}});let g=await this.core.controller.widget.getDataSourceValue(e,c.reference,c.type,f,c.object);if(g.error)return g;let h=await this.core.controller.rapport.insertData(c.id,g.data.value);if(h.error)return h}}var _default=Rapport;exports.default=_default,module.exports=exports.default;