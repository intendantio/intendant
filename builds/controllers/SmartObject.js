"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _package=_interopRequireDefault(require("../package")),_Controller=_interopRequireDefault(require("./Controller")),_Tracing=_interopRequireDefault(require("../utils/Tracing")),_Result=_interopRequireDefault(require("../utils/Result")),_StackTrace=_interopRequireDefault(require("../utils/StackTrace"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}class Smartobject extends _Controller.default{constructor(a){super(),this.smartobjectManager=a}async getAll(){try{let a=[],b=await this.sqlSmartobject.getAll();if(b.error)return b;else{let c=b.data;for(let b=0;b<c.length;b++){let d=c[b],e=await this.getOne(d.id);if(e.error)return e;a.push(e.data)}}return new _Result.default(_package.default.name,!1,"",a)}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when get all smartobject"),new _Result.default(_package.default.name,!0,"Error occurred when get all smartobject")}}async deleteArguments(a){try{let b=await this.sqlSmartobjectArgument.getOne(a);if(b.error)return b;let c=b.data,d=await this.sqlSmartobjectArgument.deleteAllByField({id:a});if(d.error)return d;let e=await this.smartobjectManager.update(c.smartobject);return e.error?e:new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when delete smartobject argument"),new _Result.default(_package.default.name,!0,"Error occurred when delete smartobject argument")}}async insertArguments(a,b,c){try{if(b){if(c){let d=await this.sqlSmartobject.getOne(a);if(d.error)return d;let e=await this.sqlSmartobjectArgument.insert({id:null,smartobject:a,reference:b,value:c});if(e.error)return e;let f=await this.smartobjectManager.update(d.data.id);return f.error?f:new _Result.default(_package.default.name,!1,"")}return _Tracing.default.warning(_package.default.name,"Missing value"),new _Result.default(_package.default.name,!0,"Missing value")}return _Tracing.default.warning(_package.default.name,"Missing reference"),new _Result.default(_package.default.name,!0,"Missing reference")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when insert smartobject argument"),new _Result.default(_package.default.name,!0,"Error occurred when insert smartobject argument")}}async getOne(a){try{let b=await this.sqlSmartobject.getOne(a);if(b.error)return b;if(!1===b.data)return _Tracing.default.warning(_package.default.name,"Smartobject not found"),new _Result.default(_package.default.name,!0,"Smartobject not found");let c=b.data,d=await this.sqlSmartobjectArgument.getAllByField({smartobject:c.id});if(d.error)return d;let e=d.data,f=await this.sqlSmartobjectStatus.getOne(c.status);if(f.error)return f;let g=f.data,h=await this.sqlLocalisation.getOne(c.localisation);if(h.error)return h;let i=h.data,j=await this.sqlSmartobjectProfile.getAllByField({smartobject:c.id});if(j.error)return j;let k=j.data,l=[],m=null;return this.smartobjectManager.instances.has(c.id)&&(l=this.smartobjectManager.instances.get(c.id).getActions(),m=this.smartobjectManager.instances.get(c.id).moduleConfiguration.icon),new _Result.default(_package.default.name,!1,"",{id:c.id,icon:m,module:c.module,reference:c.reference,lastUse:c.last_use,status:g,arguments:e,actions:l,profiles:k,localisation:i})}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when get one smartobject"),new _Result.default(_package.default.name,!0,"Error occurred when get one smartobject")}}async insertSmartobjectProfile(a,b){try{let c=await this.sqlSmartobject.getOne(a);if(c.error)return c;let d=c.data,e=await this.sqlSmartobjectProfile.getOneByField({smartobject:a,profile:b});if(e.error)return e;let f=e.data;if(!1===f){let a=await this.sqlSmartobjectProfile.insert({id:null,smartobject:d.id,profile:b});if(a.error)return a}return new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when insert smartobject profile"),new _Result.default(_package.default.name,!0,"Error occurred when insert smartobject profile")}}async deleteSmartobjectProfile(a,b){try{let c=await this.sqlSmartobject.getOne(a);if(c.error)return c;let d=c.data,e=await this.sqlSmartobjectProfile.getOneByField({smartobject:a,profile:b});if(e.error)return e;let f=e.data;if(f){let a=await this.sqlSmartobjectProfile.deleteAllByField({id:f.id});if(a.error)return a}return new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when delete smartobject profile"),new _Result.default(_package.default.name,!0,"Error occurred when delete smartobject profile")}}async updateLastUse(a){try{let b=await this.sqlSmartobject.updateAll({last_use:"DATE:NOW"},{id:a});return b.error?b:new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when update last smartobject use"),new _Result.default(_package.default.name,!0,"Error occurred when update last smartobject use")}}async updateStatus(a,b){try{let c=await this.sqlSmartobject.updateAll({status:b},{id:a});return c.error?c:new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when update smartobject status"),new _Result.default(_package.default.name,!0,"Error occurred when update smartobject status")}}async updateLocalisation(a,b){try{let c=await this.sqlSmartobject.updateAll({localisation:b},{id:a});return c.error?c:new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when update localisation smartobject"),new _Result.default(_package.default.name,!0,"Error occurred when update localisation smartobject")}}async insert(a,b,c,d){try{if(!a)return _Tracing.default.warning(_package.default.name,"Missing module"),new _Result.default(_package.default.name,!0,"Missing module");if(b){if(!c)return _Tracing.default.warning(_package.default.name,"Missing arguments"),new _Result.default(_package.default.name,!0,"Missing arguments");if(d){let e=await this.sqlSmartobject.getOneByField({reference:b});if(e.error)return e;let f=e.data;if(f)return _Tracing.default.warning(_package.default.name,"Smartobject already exist"),new _Result.default(_package.default.name,!0,"Smartobject already exist");else{let e=await this.sqlSmartobject.insert({id:null,module:a,status:"2",reference:b,last_use:"DATE:NOW",localisation:d});if(e.error)return e;else{let a=e.data.insertId;for(let b=0;b<c.length;b++){let d=c[b],e=await this.sqlSmartobjectArgument.insert({id:null,smartobject:a,reference:d.reference,value:d.value});if(e.error)return e}return this.smartobjectManager.update(a),this.getOne(a)}}}else return _Tracing.default.warning(_package.default.name,"Missing localisation"),new _Result.default(_package.default.name,!0,"Missing localisation")}else return _Tracing.default.warning(_package.default.name,"Missing reference"),new _Result.default(_package.default.name,!0,"Missing reference")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when insert smartobject"),new _Result.default(_package.default.name,!0,"Error occurred when insert smartobject")}}async delete(a){try{let b=await this.sqlSmartobjectArgument.deleteAllByField({smartobject:a});if(b.error)return b;let c=await this.sqlSmartobject.deleteOne(a);return c.error?c:new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when delete smartobject"),new _Result.default(_package.default.name,!0,"Error occurred when delete smartobject")}}isAllow(a,b,c=!1){let d=!1;return a.profiles.forEach(a=>{a.profile==b&&(d=!0)}),d||c}async executeAction(a,b,c,d,e=!1){try{if(b){if(c){let f=await this.sqlSmartobject.getOne(a);if(f.error)return f;if(!1==f.data)return new _Result.default(_package.default.name,!0,"Smartobject not found");if(this.smartobjectManager.instances.has(f.data.id)){let a=this.smartobjectManager.instances.get(f.data.id),g=await this.getOne(a.id);return this.isAllow(g.data,c,e)?a.action(b,d):(_Tracing.default.warning(_package.default.name,"Not allowed"),new _Result.default(_package.default.name,!0,"You are not allowed"))}return _Tracing.default.warning(_package.default.name,"Smartobject missing"),new _Result.default(_package.default.name,!0,"Smartobject missing")}return _Tracing.default.warning(_package.default.name,"Missing argument"),new _Result.default(_package.default.name,!0,"Missing arguments")}return _Tracing.default.warning(_package.default.name,"Missing action"),new _Result.default(_package.default.name,!0,"Missing action")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when execute smartobject action"),new _Result.default(_package.default.name,!0,"Error occurred when execute smartobject action")}}}var _default=Smartobject;exports.default=_default,module.exports=exports.default;