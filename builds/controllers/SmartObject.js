"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _package=_interopRequireDefault(require("../package")),_Controller=_interopRequireDefault(require("./Controller")),_Tracing=_interopRequireDefault(require("../utils/Tracing")),_Result=_interopRequireDefault(require("../utils/Result")),_StackTrace=_interopRequireDefault(require("../utils/StackTrace")),_Parser=_interopRequireDefault(require("../utils/Parser"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}class Smartobject extends _Controller.default{async getAll(){try{let a=[],b=await this.sqlSmartobject.getAll();if(b.error)return b;else{let c=b.data;for(let b=0;b<c.length;b++){let d=c[b],e=await this.getOne(d.id);if(e.error)return e;a.push(e.data)}}return new _Result.default(_package.default.name,!1,"",a)}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when get all smartobject"),new _Result.default(_package.default.name,!0,"Error occurred when get all smartobject")}}async getOne(a){try{let b=await this.sqlSmartobject.getOne(a);if(b.error)return b;if(!1===b.data)return _Tracing.default.warning(_package.default.name,"Smartobject not found"),new _Result.default(_package.default.name,!0,"Smartobject not found");let c=b.data,d=await this.sqlSmartobjectArgument.getAllByField({smartobject:a});if(d.error)return d;let e=d.data.map(a=>(a.value=_Parser.default.parse(a.value),a)),f=await this.sqlRoom.getOne(c.room);if(f.error)return f;let g=f.data,h=require(c.module+"/package.json"),i=await this.sqlSmartobjectProfile.getAllByField({smartobject:a});if(i.error)return i;let j=i.data,k=[],l=[],m=[],n=[],o={status:"unknown",reason:"Unknown"};if(this.smartobjectManager.instances.has(parseInt(c.id))){k=this.smartobjectManager.instances.get(parseInt(c.id)).getActions(),k==null&&console.log(this.smartobjectManager.instances.get(parseInt(c.id)).getActions),l=this.smartobjectManager.instances.get(parseInt(c.id)).getWidgets(),m=this.smartobjectManager.instances.get(parseInt(c.id)).getDataSources(),n=this.smartobjectManager.instances.get(parseInt(c.id)).getTriggers();let a=await this.smartobjectManager.instances.get(parseInt(c.id)).getState();if(a.error)return a;o=a.data}else _Tracing.default.warning(_package.default.name,"Smartobject n\xB0"+c.id+" was not instanciate");return new _Result.default(_package.default.name,!1,"",{id:c.id,module:c.module,reference:c.reference,lastUse:c.last_use,arguments:e,actions:k,widgets:l,dataSources:m,triggers:n,profiles:j,state:o,room:g,configuration:h})}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when get one smartobject"),new _Result.default(_package.default.name,!0,"Error occurred when get one smartobject")}}getAllConfiguration(){try{let a=[];for(let b=0;b<this.smartobjectManager.packages.length;b++){let c=this.smartobjectManager.packages[b],d=require(c+"/package.json");a.push(d)}return new _Result.default(_package.default.name,!1,"",a)}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when get all configuration in module"),new _Result.default(_package.default.name,!0,"Error occurred when get all configuration in module")}}async insertSmartobjectProfile(a,b){try{let c=await this.sqlSmartobject.getOne(a);if(c.error)return c;let d=c.data,e=await this.sqlSmartobjectProfile.getOneByField({smartobject:a,profile:b});if(e.error)return e;let f=e.data;if(!1===f){let a=await this.sqlSmartobjectProfile.insert({id:null,smartobject:d.id,profile:b});if(a.error)return a}return new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when insert smartobject profile"),new _Result.default(_package.default.name,!0,"Error occurred when insert smartobject profile")}}async deleteSmartobjectProfile(a,b){try{let c=await this.sqlSmartobject.getOne(a);if(c.error)return c;let d=await this.sqlSmartobjectProfile.getOneByField({smartobject:a,profile:b});if(d.error)return d;let e=d.data;if(e){let a=await this.sqlSmartobjectProfile.deleteAllByField({id:e.id});if(a.error)return a}return new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when delete smartobject profile"),new _Result.default(_package.default.name,!0,"Error occurred when delete smartobject profile")}}async updateLastUse(a){try{let b=await this.sqlSmartobject.updateAll({last_use:"DATE:NOW"},{id:a});return b.error?b:new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when update last smartobject use"),new _Result.default(_package.default.name,!0,"Error occurred when update last smartobject use")}}async updateStatus(a,b){try{let c=await this.sqlSmartobject.updateAll({status:b},{id:a});return c.error?c:new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when update smartobject status"),new _Result.default(_package.default.name,!0,"Error occurred when update smartobject status")}}async updateRoom(a,b){try{let c=await this.sqlSmartobject.updateAll({room:b},{id:a});return c.error?c:new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when update room smartobject"),new _Result.default(_package.default.name,!0,"Error occurred when update room smartobject")}}async updateArgument(a,b,c){try{let d=await this.sqlSmartobjectArgument.updateAll({reference:b,smartobject:a},{value:c});return d.error?d:new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when update arguments smartobject"),new _Result.default(_package.default.name,!0,"Error occurred when update arguments smartobject")}}async updateReference(a,b){try{let c=await this.sqlSmartobject.updateAll({reference:b},{id:a});return c.error?c:new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when update room smartobject"),new _Result.default(_package.default.name,!0,"Error occurred when update room smartobject")}}async insert(a,b,c,d){try{let e=await this.sqlSmartobject.getOneByField({reference:a});if(e.error)return e;let f=e.data;if(f)return _Tracing.default.warning(_package.default.name,"Smartobject already exist"),new _Result.default(_package.default.name,!0,"Smartobject already exist");else{let e=await this.sqlSmartobject.insert({module:b,status:2,reference:a,last_use:"",room:c});if(e.error)return e;else{let a=e.data.insertId;for(let b=0;b<d.length;b++){let c=d[b],e=await this.sqlSmartobjectArgument.insert({smartobject:a,reference:c.reference,value:_Parser.default.stringify(c.value)});if(e.error)return e}return this.smartobjectManager.update(a),this.getOne(a)}}}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when insert smartobject"),new _Result.default(_package.default.name,!0,"Error occurred when insert smartobject")}}async delete(a){try{/* Check process */let b=await this.sqlProcessAction.count({type:"smartobject",object:a});if(b.error)return b;if(0<b.data.count)return new _Result.default(_package.default.name,!0,"Impossible to delete this smartobject that is used in a process");/* Check rapport */let c=await this.sqlRapport.count({type:"smartobject",object:a});if(c.error)return c;if(0<c.data.count)return new _Result.default(_package.default.name,!0,"Impossible to delete this smartobject that is used in a rapport");/* Check widget */let d=await this.sqlWidget.count({type:"smartobject",object:a});if(d.error)return d;if(0<d.data.count)return new _Result.default(_package.default.name,!0,"Impossible to delete this smartobject that is used in a widget");/* Check automation */let e=await this.sqlAutomationTrigger.count({type:"smartobject",object:a});if(e.error)return e;if(0<e.data.count)return new _Result.default(_package.default.name,!0,"Impossible to delete this smartobject that is used in a automation");let f=await this.sqlAutomationAction.count({type:"smartobject",object:a});if(f.error)return f;if(0<f.data.count)return new _Result.default(_package.default.name,!0,"Impossible to delete this smartobject that is used in a automation");let g=await this.sqlSmartobjectArgument.deleteAllByField({smartobject:a});if(g.error)return g;let h=await this.sqlSmartobject.deleteOne(a);return h.error?h:new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when delete smartobject"),new _Result.default(_package.default.name,!0,"Error occurred when delete smartobject")}}async executeAction(a,b,c=1,d,e=!1,f=0){try{if(b){let c=await this.getOne(a);if(c.error)return c;let e=c.data;if(this.smartobjectManager.instances.has(parseInt(a))){let c=this.smartobjectManager.instances.get(parseInt(a));{this.updateLastUse(a);let g=c.action(b,d);if(g.error)return g;if(0!=f){let a=await this.userController.insertHistory(f,"EXECUTE",e.reference+" - "+b);if(a.error)return a}return g}}else return _Tracing.default.warning(_package.default.name,"Smartobject missing"),new _Result.default(_package.default.name,!0,"Smartobject missing")}else return _Tracing.default.warning(_package.default.name,"Missing action"),new _Result.default(_package.default.name,!0,"Missing action")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when execute smartobject action"),new _Result.default(_package.default.name,!0,"Error occurred when execute smartobject action")}}}var _default=Smartobject;exports.default=_default,module.exports=exports.default;