"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _Controller=_interopRequireDefault(require("./Controller")),_package=_interopRequireDefault(require("../package.json")),_Tracing=_interopRequireDefault(require("../utils/Tracing")),_Result=_interopRequireDefault(require("../utils/Result")),_StackTrace=_interopRequireDefault(require("../utils/StackTrace"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}class Automation extends _Controller.default{async getAll(){try{let a=await this.sqlAutomation.getAll();if(a.error)return a;let b=[];for(let c=0;c<a.data.length;c++){let d=a.data[c],e=await this.getOne(d.id);if(e.error)return e;b.push(e.data)}return new _Result.default(_package.default.name,!1,"",b)}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when get all automation"),new _Result.default(_package.default.name,!0,"Error occurred when get all automation")}}async getOne(a){try{let b=await this.sqlAutomation.getOne(a);if(b.error)return b;if(!1===b.data)return _Tracing.default.warning(_package.default.name,"Automation not found"),new _Result.default(_package.default.name,!0,"Automation not found");let c=b.data,d=await this.sqlAutomationTrigger.getOneByField({automation:c.id});if(d.error)return d;if(!1==d.data)return _Tracing.default.warning(_package.default.name,"Automation trigger not found"),new _Result.default(_package.default.name,!0,"Automation trigger not found");let e=await this.sqlAutomationAction.getOneByField({automation:c.id});if(e.error)return e;if(!1==e.data)return _Tracing.default.warning(_package.default.name,"Automation action not found"),new _Result.default(_package.default.name,!0,"Automation action not found");let f=await this.sqlAutomationActionArgument.getAllByField({automation_action:e.data.id});return f.error?f:(c.trigger=d.data,c.action=e.data,c.action.settings=f.data,new _Result.default(_package.default.name,!1,"",c))}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when get one automation"),new _Result.default(_package.default.name,!0,"Error occurred when get one automation")}}async insert(a,b,c){try{let d=await this.sqlAutomation.insert({reference:a});if(d.error)return d;let e=d.data.insertId,f=await this.sqlAutomationTrigger.insert({automation:e,type:b.type,object:b.object,trigger:b.trigger});if(f.error)return f;let g=await this.sqlAutomationAction.insert({automation:e,type:c.type,object:c.object,action:c.action});if(g.error)return g;let h=g.data.insertId;for(let a=0;a<c.settings.length;a++){let b=c.settings[a],d=await this.sqlAutomationActionArgument.insert({reference:b.reference,value:b.value,automation_action:h});if(d.error)return d}return await this.automationManager.before(),await this.getOne(e)}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when insert automation"),new _Result.default(_package.default.name,!0,"Error occurred when insert automation")}}async delete(a){try{let b=await this.automationManager.removeInstance(parseInt(a));if(b.error)return b;let c=await this.sqlAutomationAction.getAllByField({automation:a});if(c.error)return c;for(let a=0;a<c.data.length;a++){let b=c.data[a],d=await this.sqlAutomationActionArgument.deleteAllByField({automation_action:b.id});if(d.error)return d}return await this.sqlAutomationAction.deleteAllByField({automation:a}),await this.sqlAutomationTrigger.deleteAllByField({automation:a}),await this.sqlAutomation.deleteOne(a),new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when delete automation"),new _Result.default(_package.default.name,!0,"Error occurred when delete automation")}}}var _default=Automation;exports.default=_default,module.exports=exports.default;