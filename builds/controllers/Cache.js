"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _Controller=_interopRequireDefault(require("./Controller")),_package=_interopRequireDefault(require("../package.json")),_Tracing=_interopRequireDefault(require("../utils/Tracing")),_Result=_interopRequireDefault(require("../utils/Result")),_StackTrace=_interopRequireDefault(require("../utils/StackTrace"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}class Cache extends _Controller.default{async get(a){try{_Tracing.default.verbose(_package.default.name,"Get cache "+a.reference),await this.check();let b=await this.sqlCache.getOneByField({reference:a.reference});if(b.error)return result;if(b.data){let a=new _Result.default(_package.default.name,!1,"",JSON.parse(Buffer.from(b.data.value,"base64").toString("utf-8")).cache);return a.cache=!0,a}else{let a=new _Result.default(_package.default.name,!1,"",!1);return a.cache=!1,a}}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when get all cache"),new _Result.default(_package.default.name,!0,"Error occurred when get all cache")}}async clear(a){try{return _Tracing.default.verbose(_package.default.name,"Clear cache "+a),await this.sqlCache.deleteAllByField({reference:a})}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when clear cache"),new _Result.default(_package.default.name,!0,"Error occurred when clear cache")}}async insert(a){try{await this.check();let b=await this.sqlCache.getOneByField({reference:a.reference});if(b.error)return b;if(!1==b.data){let b=Buffer.from(JSON.stringify({cache:a.data})).toString("base64");return await this.sqlCache.insert({id:null,reference:a.reference,value:b,expiry:"DATE:CUSTOM"+a.interval})}}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when insert cache"),new _Result.default(_package.default.name,!0,"Error occurred when insert cache")}}async check(){try{let a=await this.sqlCache.execute("DELETE FROM cache WHERE expiry < datetime('now')",{run:!0});return a.error?a:new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when check cache"),new _Result.default(_package.default.name,!0,"Error occurred when check cache")}}}var _default=Cache;exports.default=_default,module.exports=exports.default;