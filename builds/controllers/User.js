"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _Math=_interopRequireDefault(require("./tools/Math")),_md=_interopRequireDefault(require("md5")),_Controller=_interopRequireDefault(require("./Controller")),_package=_interopRequireDefault(require("../package.json")),_Tracing=_interopRequireDefault(require("../utils/Tracing")),_StackTrace=_interopRequireDefault(require("../utils/StackTrace")),_Result=_interopRequireDefault(require("../utils/Result"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}class User extends _Controller.default{async getOne(a){try{return await this.sqlUser.getOne(a)}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when get one user"),new _Result.default(_package.default.name,!0,"Error occurred when get one user")}}async getAll(){try{let a=await this.sqlUser.getAll();if(!1==a.error){let b=a.data.map(a=>(a.password="",a));a.data=b}return a}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when get all user"),new _Result.default(_package.default.name,!0,"Error occurred when get all user")}}async delete(a){try{let b=await this.sqlUser.getOne(a);if(b.error)return b;if(!1==b.data)return _Tracing.default.warning(_package.default.name,"Invalid user"),new _Result.default(_package.default.name,!0,"Invalid user");if("admin"==b.data.login)return _Tracing.default.warning(_package.default.name,"Cannot delete admin"),new _Result.default(_package.default.name,!0,"Cannot delete admin");let c=this.sqlClient.deleteAllByField({user:a});if(c.error)return c;let d=this.sqlUser.deleteAllByField({id:a});return d.error?d:new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when delete one user"),new _Result.default(_package.default.name,!0,"Error occurred when delete one user")}}async insert(a,b,c="2"){try{if(!(a&&""!==a))return _Tracing.default.warning(_package.default.name,"Empty login"),new _Result.default(_package.default.name,!0,"Empty login");if(b&&""!==b){let d=await this.sqlUser.getOneByField({login:a});if(d.error)return d;else{let e=d.data;if(e)return _Tracing.default.warning(_package.default.name,"Login already exist"),new _Result.default(_package.default.name,!0,"Login already exist");else{_Tracing.default.verbose(_package.default.name,"Insert user "+a);let d=_Math.default.random(16),e=(0,_md.default)(b+d),f=await this.sqlUser.insert({id:null,login:a,password:e,salt:d,profile:c});return f.error?f:new _Result.default(_package.default.name,!1,"")}}}else return _Tracing.default.warning(_package.default.name,"Empty password"),new _Result.default(_package.default.name,!0,"Empty password")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when insert user"),new _Result.default(_package.default.name,!0,"Error occurred when insert user")}}async insertAdmin(a){try{let b=await this.getStarted();return b.getStarted?a&&"string"==typeof a?4<=a.length?this.insert("admin",a,"1"):(_Tracing.default.warning(_package.default.name,"Too small password"),new _Result.default(_package.default.name,!0,"Too small password")):(_Tracing.default.warning(_package.default.name,"Invalid password"),new _Result.default(_package.default.name,!0,"Invalid password")):(_Tracing.default.warning(_package.default.name,"Invalid cycle state"),new _Result.default(_package.default.name,!0,"Invalid cycle state"))}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when insert admin"),new _Result.default(_package.default.name,!0,"Error occurred when insert admin")}}async update(a,b,c){try{if(b){if(c){let d=await this.sqlUser.getOne(a);if(d.error)return d;let e=d.data;if(e.login!=b){let c=this.sqlUser.updateAll({login:b},{id:a});if(c.error)return d}if(e.profile!=c){let b=this.sqlUser.updateAll({profile:c},{id:a});if(b.error)return d}return new _Result.default(_package.default.name,!1,"")}return new _Result.default(_package.default.name,!0,"Missing profile")}return new _Result.default(_package.default.name,!0,"Missing login")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when update user"),new _Result.default(_package.default.name,!0,"Error occurred when update user")}}async updatePassword(a,b){try{let c=_Math.default.random(16),d=await this.sqlUser.updateAll({password:(0,_md.default)(b+c)},{id:a});if(d.error)return d;else{let b=await this.sqlUser.updateAll({salt:c},{id:a});return b.error?b:new _Result.default(_package.default.name,!1,"")}}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when update password"),new _Result.default(_package.default.name,!0,"Error occurred when update password")}}async getStarted(){try{let a=await this.sqlUser.getOneByField({login:"admin"});if(a.error)return a;let b=new _Result.default(_package.default.name,!1,"");return b.getStarted=!1==a.data,b}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when get started"),new _Result.default(_package.default.name,!0,"Error occurred when get started")}}}var _default=User;exports.default=_default,module.exports=exports.default;