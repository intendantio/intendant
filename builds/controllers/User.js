"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _Math=_interopRequireDefault(require("./tools/Math")),_md=_interopRequireDefault(require("md5")),_Controller=_interopRequireDefault(require("./Controller")),_package=_interopRequireDefault(require("../package.json")),_Tracing=_interopRequireDefault(require("../utils/Tracing")),_moment=_interopRequireDefault(require("moment")),_StackTrace=_interopRequireDefault(require("../utils/StackTrace")),_Result=_interopRequireDefault(require("../utils/Result"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}class User extends _Controller.default{async getOne(a){try{let b=await this.sqlUser.getOne(a);if(b.error)return b;if(!1==b.data)return _Tracing.default.warning(_package.default.name,"User not found"),new _Result.default(_package.default.name,!0,"User not found");let c=b.data,d=await this.sqlUserHistory.getAllByField({user:c.id});return d.error?d:(c.password="hidden",c.histories=d.data,new _Result.default(_package.default.name,!1,"",c))}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when get one user"),new _Result.default(_package.default.name,!0,"Error occurred when get one user")}}async getAll(){try{let a=await this.sqlUser.getAll();if(a.error)return a;let b=[];for(let c=0;c<a.data.length;c++){let d=a.data[c],e=await this.getOne(d.id);if(e.error)return e;b.push(d)}return new _Result.default(_package.default.name,!1,"",b)}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when get all user"),new _Result.default(_package.default.name,!0,"Error occurred when get all user")}}async delete(a){try{let b=await this.sqlUser.getOne(a);if(b.error)return b;if(!1==b.data)return _Tracing.default.warning(_package.default.name,"Invalid user"),new _Result.default(_package.default.name,!0,"Invalid user");if("admin"==b.data.login)return _Tracing.default.warning(_package.default.name,"Cannot delete admin"),new _Result.default(_package.default.name,!0,"Cannot delete admin");let c=this.sqlUserHistory.deleteAllByField({user:a});if(c.error)return c;let d=this.sqlUser.deleteAllByField({id:a});return d.error?d:new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when delete user"),new _Result.default(_package.default.name,!0,"Error occurred when delete user")}}async insert(a){try{if(!(a.login&&""!==a.login))return _Tracing.default.warning(_package.default.name,"Empty login"),new _Result.default(_package.default.name,!0,"Empty login");if(a.password&&""!==a.password){let b=await this.sqlUser.getOneByField({login:a.login});if(b.error)return b;else{let c=b.data;if(c)return _Tracing.default.warning(_package.default.name,"Login already exist"),new _Result.default(_package.default.name,!0,"Login already exist");else{_Tracing.default.verbose(_package.default.name,"Insert user "+a.login);let b=_Math.default.random(16),c=(0,_md.default)(a.password+b),d=await this.sqlUser.insert({id:null,login:a.login,imei:a.imei,password:c,salt:b,profile:a.profile});if(d.error)return d;else{let a=d.data.insertId,b=this.insertHistory(a,"CREATE","Initialisation");return b.error?b:new _Result.default(_package.default.name,!1,"")}}}}else return _Tracing.default.warning(_package.default.name,"Empty password"),new _Result.default(_package.default.name,!0,"Empty password")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when insert user"),new _Result.default(_package.default.name,!0,"Error occurred when insert user")}}// Type : ["CREATE","UPDATE","GET","DELETE","EXECUTE"]
async insertHistory(a,b,c){try{let d=await this.getOne(a);if(d.error)return d;if(!1==d.data)return _Tracing.default.warning(_package.default.name,"Missing user"),new _Result.default(_package.default.name,!0,"Missing user");else{let d=(0,_moment.default)().valueOf(),e=await this.sqlUserHistory.insert({id:null,type:b,action:c,user:a,date:d});return e.error?e:new _Result.default(_package.default.name,!1,"")}}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when insert user history"),new _Result.default(_package.default.name,!0,"Error occurred when user history")}}async insertAdmin(a){try{let b=await this.sqlUser.getOneByField({login:"admin"});return b.error?b:!1==b.data?a&&"string"==typeof a?4<=a.length?this.insert({login:"admin",password:a,profile:"1",imei:""}):(_Tracing.default.warning(_package.default.name,"Too small password"),new _Result.default(_package.default.name,!0,"Too small password")):(_Tracing.default.warning(_package.default.name,"Invalid password"),new _Result.default(_package.default.name,!0,"Invalid password")):(_Tracing.default.warning(_package.default.name,"Invalid cycle state"),new _Result.default(_package.default.name,!0,"Invalid cycle state"))}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when insert admin"),new _Result.default(_package.default.name,!0,"Error occurred when insert admin")}}async updatePassword(a,b){try{let c=_Math.default.random(16),d=await this.sqlUser.updateAll({password:(0,_md.default)(b+c)},{id:a});if(d.error)return d;else{let b=await this.sqlUser.updateAll({salt:c},{id:a});return b.error?b:new _Result.default(_package.default.name,!1,"")}}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when update password"),new _Result.default(_package.default.name,!0,"Error occurred when update password")}}async updateProfile(a,b){try{let c=await this.getOne(a);if(c.error)return c;if("admin"==c.data.login)return _Tracing.default.warning(_package.default.name,"Cannot update admin"),new _Result.default(_package.default.name,!0,"Cannot update admin");let d=await this.sqlUser.updateAll({profile:b},{id:a});return d.error?d:new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when update password"),new _Result.default(_package.default.name,!0,"Error occurred when update password")}}async getStarted(){try{let a=await this.sqlUser.getOneByField({login:"admin"});if(a.error)return a;let b=new _Result.default(_package.default.name,!1,"");return b.getStarted=!1==a.data,b}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when get started"),new _Result.default(_package.default.name,!0,"Error occurred when get started")}}}var _default=User;exports.default=_default,module.exports=exports.default;