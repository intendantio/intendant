"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _Controller=_interopRequireDefault(require("./Controller")),_package=_interopRequireDefault(require("../package.json")),_Tracing=_interopRequireDefault(require("../utils/Tracing")),_Result=_interopRequireDefault(require("../utils/Result")),_StackTrace=_interopRequireDefault(require("../utils/StackTrace")),_fsExtra=require("fs-extra");function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}class Process extends _Controller.default{constructor(a,b,c){super(),this.moduleManager=b,this.smartobjectManager=a,this.essentialController=c}async getOne(a){try{let b=await this.sqlProcess.getOne(a);if(b.error)return b;if(!1===b.data)return new _Result.default(_package.default.name,!0,"Process not found");let c=await this.sqlProcessAction.getAllByField({process:a});if(c.error)return c;let d=[];for(let a=0;a<c.data.length;a++){let b=c.data[a],e=await this.sqlProcessActionArgument.getAllByField({process_action:b.id});if(e.error)return e;b.arguments=e.data,d.push(b)}let e=await this.sqlProcessInput.getAllByField({process:a});if(e.error)return e;let f=[];for(let a=0;a<e.data.length;a++){let b=e.data[a],c=await this.sqlProcessInputOption.getAllByField({process_input:b.id});if(c.error)return c;b.options={};for(let a,d=0;d<c.data.length;d++)a=c.data[d],b.options[a.reference]=a.value;f.push(b)}let g=await this.sqlProcessProfile.getAllByField({process:a});if(g.error)return g;let h=b.data;return h.inputs=f,h.actions=d,h.profiles=g.data,new _Result.default(_package.default.name,!1,"",h)}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when get one process"),new _Result.default(_package.default.name,!0,"Error occurred when get one process")}}async getAll(){try{let a=await this.sqlProcess.getAll();if(a.error)return a;else{let b=[],c=a.data;for(let a=0;a<c.length;a++){let d=c[a],e=await this.getOne(d.id);if(e.error)return e;b.push(e.data)}return new _Result.default(_package.default.name,!1,"",b)}}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when get all process"),new _Result.default(_package.default.name,!0,"Error occurred when get all process")}}async delete(a){try{let b=await this.sqlProcessAction.getAllByField({process:a});if(b.error)return b;for(let a=0;a<b.data.length;a++){let c=b.data[a],d=await this.sqlProcessActionArgument.deleteAllByField({process_action:c.id});if(d.error)return d}return await this.sqlProcessInput.deleteAllByField({process:a}),await this.sqlProcessAction.deleteAllByField({process:a}),await this.sqlProcessProfile.deleteAllByField({process:a}),await this.sqlProcess.deleteOne(a),new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when delete one process"),new _Result.default(_package.default.name,!0,"Error occurred when delete one process")}}async insertProcessProfile(a,b){try{let c=await this.sqlProcess.getOne(a);if(c.error)return c;let d=c.data,e=await this.sqlProcessProfile.getOneByField({Process:a,profile:b});if(e.error)return e;let f=e.data;if(!1===f){let a=await this.sqlProcessProfile.insert({id:null,Process:d.id,profile:b});if(a.error)return a}return new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when insert process profile"),new _Result.default(_package.default.name,!0,"Error occurred when insert process profile")}}async deleteProcessProfile(a,b){try{let c=await this.sqlProcess.getOne(a);if(c.error)return c;let d=await this.sqlProcessProfile.getOneByField({Process:a,profile:b});if(d.error)return d;let e=d.data;if(e){let a=await this.sqlProcessProfile.deleteAllByField({id:e.id});if(a.error)return a}return new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when delete process profile"),new _Result.default(_package.default.name,!0,"Error occurred when delete process profile")}}isAllow(a,b,c=!1){let d=!1;return a.profiles.forEach(a=>{a.profile==b&&(d=!0)}),d||c}async executeAction(a,b,c,d=!1){try{let e=await this.getOne(a);if(e.error)return e;let f=e.data;if(this.isAllow(f,b,d)){let a=f.actions,b=[];for(let d=0;d<a.length;d++){const e=a[d];let g={};if(e.arguments.forEach(a=>{for(let b in c){let d=c[b];a.value=null==d?a.value.replace("{"+b+"}",a.default_value):a.value.replace("{"+b+"}",d)}g[a.reference]=a.value}),e.state===f.state)if("smartobject"===e.type){let a=await this.sqlSmartobject.getOne(e.object);if(a.error)return a;let c=await this.smartobjectManager.instances.get(a.data.id).action(e.action,g);if(c.error)return c;b.push(c.data)}else if("module"===e.type){let a=await this.moduleManager.executeAction(e.object,e.action,g);if(a.error)return a;b.push(a.data)}else if("essential"===e.type){let a=await this.essentialController.executeAction(e.action,g);if(a.error)return a;b.push(a.data)}else return _Tracing.default.error(_package.default.name,"Invalid action type"),new _Result.default(_package.default.name,!1,"Invalid action type")}return"switch"===f.mode&&(await this.sqlProcess.updateAll({state:"on"==f.state?"off":"on"},{id:f.id})),new _Result.default(_package.default.name,!1,"",b)}return new _Result.default(_package.default.name,!0,"You are not allowed")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when execute process"),new _Result.default(_package.default.name,!0,"Error occurred when execute process")}}async insert(a){try{let b=await this.sqlProcess.insert({id:null,description:a.description,description_on:a.description_on,description_off:a.description_off,mode:a.mode,room:a.room,state:a.state});if(b.error)return b;let c=b.data.insertId;for(let b=0;b<a.actions.length;b++){let d=a.actions[b],e=await this.sqlProcessAction.insert({id:null,process:c,type:d.type,object:d.object,action:d.action,state:d.state});if(e.error)return e;let f=e.data.insertId;for(let a=0;a<d.settings.length;a++){let b=d.settings[a],c=await this.sqlProcessActionArgument.insert({id:null,reference:b.reference,value:b.value,default_value:b.default,process_action:f});if(c.error)return c}}for(let b=0;b<a.inputs.length;b++){let d=a.inputs[b],e=await this.sqlProcessInput.insert({id:null,process:c,reference:d.reference,type:d.type,state:d.state});if(e.error)return e;let f=e.data.insertId;for(let a=0;a<d.options.length;a++){let b=d.options[a],c=await this.sqlProcessInputOption.insert({id:null,reference:b.reference,value:b.value,process_input:f});if(c.error)return c}}return await this.getOne(c)}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when insert process"),new _Result.default(_package.default.name,!0,"Error occurred when insert process")}}}var _default=Process;exports.default=_default,module.exports=exports.default;