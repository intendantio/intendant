"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _Controller=_interopRequireDefault(require("./Controller")),_package=_interopRequireDefault(require("../package.json")),_Tracing=_interopRequireDefault(require("../utils/Tracing")),_Result=_interopRequireDefault(require("../utils/Result")),_StackTrace=_interopRequireDefault(require("../utils/StackTrace"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}class Process extends _Controller.default{constructor(a,b){super(),this.moduleManager=b,this.smartobjectManager=a}async getOne(a){try{let b=await this.sqlProcess.getOne(a);if(b.error)return b;if(!1===b.data)return new _Result.default(_package.default.name,!1,"Process not found");let c=await this.sqlProcessAction.getAllByField({process:a});if(c.error)return c;let d=[];for(let a=0;a<c.data.length;a++){let b=c.data[a],e=await this.sqlProcessActionArgument.getAllByField({process_action:b.id});if(e.error)return e;b.arguments=e.data,d.push(b)}let e=await this.sqlProcessInput.getAllByField({process:a});if(e.error)return e;let f=await this.sqlProcessProfile.getAllByField({process:a});if(f.error)return f;let g=await this.sqlEspace.getOne(b.data.espace);if(g.error)return g;let h=b.data;return h.actions=d,h.inputs=e.data.map(a=>(a.id=a.reference,a)),h.profiles=f.data,h.espace=g.data,new _Result.default(_package.default.name,!1,"",h)}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when get one process"),new _Result.default(_package.default.name,!0,"Error occurred when get one process")}}async getAll(){try{let a=await this.sqlProcess.getAll();if(a.error)return a;else{let b=[],c=a.data;for(let a=0;a<c.length;a++){let d=c[a],e=await this.getOne(d.id);if(e.error)return e;b.push(e.data)}return new _Result.default(_package.default.name,!1,"",b)}}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when get all process"),new _Result.default(_package.default.name,!0,"Error occurred when get all process")}}async delete(a){try{let b=await this.sqlProcessAction.getAllByField({process:a});if(b.error)return b;for(let a=0;a<b.data.length;a++){let c=b.data[a],d=await this.sqlProcessActionArgument.deleteAllByField({process_action:c.id});if(d.error)return d}return await this.sqlProcessInput.deleteAllByField({process:a}),await this.sqlProcessAction.deleteAllByField({process:a}),await this.sqlProcessProfile.deleteAllByField({process:a}),await this.sqlProcess.deleteOne(a),new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when delete one process"),new _Result.default(_package.default.name,!0,"Error occurred when delete one process")}}async insertProcessProfile(a,b){try{let c=await this.sqlProcess.getOne(a);if(c.error)return c;let d=c.data,e=await this.sqlProcessProfile.getOneByField({Process:a,profile:b});if(e.error)return e;let f=e.data;if(!1===f){let a=await this.sqlProcessProfile.insert({id:null,Process:d.id,profile:b});if(a.error)return a}return new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when insert process profile"),new _Result.default(_package.default.name,!0,"Error occurred when insert process profile")}}async deleteProcessProfile(a,b){try{let c=await this.sqlProcess.getOne(a);if(c.error)return c;let d=await this.sqlProcessProfile.getOneByField({Process:a,profile:b});if(d.error)return d;let e=d.data;if(e){let a=await this.sqlProcessProfile.deleteAllByField({id:e.id});if(a.error)return a}return new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when delete process profile"),new _Result.default(_package.default.name,!0,"Error occurred when delete process profile")}}isAllow(a,b,c=!1){let d=!1;return a.profiles.forEach(a=>{a.profile==b&&(d=!0)}),d||c}async executeAction(a,b,c,d=!1){try{let e=await this.getOne(a);if(e.error)return e;let f=e.data;if(this.isAllow(f,b,d)){let a=f.actions,b=[];for(let d=0;d<a.length;d++){const e=a[d];let g={};if(e.arguments.forEach(a=>{for(let b in c){let d=c[b];a.value=a.value.replace("{"+b+"}",d)}g[a.reference]=a.value}),e.enable===f.enable||"simple"===f.mode)if("smartobject"===e.type){let a=await this.sqlSmartobject.getOne(e.object);if(a.error)return a;let c=await this.smartobjectManager.instances.get(a.data.id).action(e.action,g);if(c.error)return c;b.push(c.data)}else if("module"===e.type){let a=await this.moduleManager.executeAction(e.object,e.action,g);if(a.error)return a;b.push(a.data)}else return _Tracing.default.error(_package.default.name,"Invalid action type"),new _Result.default(_package.default.name,!1,"Invalid action type")}if("switch"===f.mode){let a=await this.sqlProcess.updateAll({enable:0==f.enable?1:0},{id:f.id});if(a.error)return a}return new _Result.default(_package.default.name,!1,"",b)}return new _Result.default(_package.default.name,!0,"You are not allowed")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when execute process"),new _Result.default(_package.default.name,!0,"Error occurred when execute process")}}async insert(a,b,c,d,e,f,g,h,i,j){try{let k=await this.sqlProcess.insert({id:null,reference:a,name:b,name_enable:c,name_disable:d,description:e,espace:f,icon:g,enable:"0",mode:h});if(k.error)return k;let l=k.data.insertId;for(let a=0;a<i.length;a++){let b=i[a],c=await this.sqlProcessAction.insert({id:null,process:l,object:b.source.id,action:b.action.id,enable:b.enable?1:0,type:b.source.type});if(c.error)return c;let d=c.data.insertId;for(let a=0;a<b.arguments.length;a++){let c=b.arguments[a],e=await this.sqlProcessActionArgument.insert({id:null,reference:c.reference,value:c.value,process_action:d});if(e.error)return e}}for(let a=0;a<j.length;a++){let b=j[a],c=await this.sqlProcessInput.insert({id:null,reference:b.reference,name:b.name,type:b.type,enable:b.enable,process:l});if(c.error)return c}return new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when insert process"),new _Result.default(_package.default.name,!0,"Error occurred when insert process")}}async insertAction(a,b,c,d,e){try{let f=await this.sqlProcess.getOne(a);if(f.error)return f;let g=f.data,h=await this.sqlProcessAction.insert({id:null,process:g.id,object:b.id,action:c.id,enable:d?1:0,type:b.type});if(h.error)return h;let i=h.data.insertId;for(let a=0;a<e.length;a++){let b=e[a],c=await this.sqlProcessActionArgument.insert({id:null,reference:b.reference,value:b.value,process_action:i});if(c.error)return c}return new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when insert action process"),new _Result.default(_package.default.name,!0,"Error occurred when insert action process")}}async deleteAction(a,b){try{let a=await this.sqlProcessActionArgument.deleteAllByField({process_action:b});if(a.error)return a;let c=await this.sqlProcessAction.deleteAllByField({id:b});return c.error?c:new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when delete action process"),new _Result.default(_package.default.name,!0,"Error occurred when delete action process")}}async insertInput(a,b,c,d,e){try{if(a){if(b){if(c){if(d){if(null!=e){let f=await this.sqlProcess.getOne(a);if(f.error)return f;let g=await this.sqlProcessInput.getOneByField({process:a,reference:b});if(g.error)return g;if(!1==g.data){let f=await this.sqlProcessInput.insert({id:null,reference:b,name:c,type:d,enable:e,process:a});return f.error?f:new _Result.default(_package.default.name,!1,"")}return _Tracing.default.warning(_package.default.name,"Reference already exist"),new _Result.default(_package.default.name,!0,"Reference already exist")}return _Tracing.default.warning(_package.default.name,"Missing enable"),new _Result.default(_package.default.name,!0,"Missing enable")}return _Tracing.default.warning(_package.default.name,"Missing type"),new _Result.default(_package.default.name,!0,"Missing type")}return _Tracing.default.warning(_package.default.name,"Missing name"),new _Result.default(_package.default.name,!0,"Missing name")}return _Tracing.default.warning(_package.default.name,"Missing reference"),new _Result.default(_package.default.name,!0,"Missing reference")}return _Tracing.default.warning(_package.default.name,"Missing process id"),new _Result.default(_package.default.name,!0,"Missing process id")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when insert input process"),new _Result.default(_package.default.name,!0,"Error occurred when insert input process")}}async deleteInput(a,b){try{let c=await this.sqlProcessInput.deleteAllByField({reference:b,process:a});return c.error?c:new _Result.default(_package.default.name,!1,"")}catch(a){return _StackTrace.default.save(a),_Tracing.default.error(_package.default.name,"Error occurred when delete input process"),new _Result.default(_package.default.name,!0,"Error occurred when delete input process")}}}var _default=Process;exports.default=_default,module.exports=exports.default;