{"version":3,"file":"static/js/237.29d3ca6b.chunk.js","mappings":"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","sources":["components/StepperProxy.js","components/views/AddButton.js","screens/contents/Automation/New.js"],"sourcesContent":["export default function StepperProxy(props) {\r\n    if(props.index == props.value) {\r\n        return props.children\r\n    } else {\r\n        return null\r\n    }\r\n}","import React from 'react'\r\nimport { Card, IconButton } from '@mui/material'\r\nimport { Add } from '@mui/icons-material'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction AddButton(props) {\r\n    return (\r\n        <Card variant='outlined' style={{ width: 'min-content', marginTop: 8, alignContent: 'center', justifyContent: 'center', alignSelf: 'center' }} >\r\n            <Link to={props.to}>\r\n                <IconButton style={{borderRadius: 0 }} >\r\n                    <Add  />\r\n                </IconButton>\r\n            </Link>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default AddButton","import React from 'react'\r\nimport { Typography, Paper, Grid, Step, Stepper, Card, StepLabel, CardActionArea, TextField } from '@mui/material'\r\nimport Request from '../../../utils/Request'\r\nimport Desktop from '../../../components/Desktop'\r\nimport Loading from '../../../components/Loading'\r\nimport Action from '../../../components/Action'\r\nimport AddButton from '../../../components/views/AddButton'\r\nimport StepperProxy from '../../../components/StepperProxy'\r\nimport NextButton from '../../../components/NextButton'\r\n\r\n\r\nclass NewAutomation extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            loading: true,\r\n            processes: [],\r\n            sources: [],\r\n            selected: null,\r\n            trigger: null,\r\n            triggers: [],\r\n            step: \"trigger\",\r\n            description: \"\"\r\n        }\r\n        props.setTitle(\"New automation\")\r\n        props.setActionType(\"return\")\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let result = await new Request().get().fetch(\"/api/smartobjects\")\r\n        let resultProcess = await new Request().get().fetch(\"/api/processes\")\r\n        if (result.error) {\r\n            this.props.setMessage(result.package + \" : \" + result.message)\r\n            this.props.history.push('/automation')\r\n        } else if(resultProcess.error) {\r\n            this.props.setMessage(resultProcess.package + \" : \" + resultProcess.message)\r\n            this.props.history.push('/automation')\r\n        } else {\r\n            let sources = []\r\n            result.data.filter(smartobject => {\r\n                return smartobject.configuration != null\r\n            }).filter(smartobject => {\r\n                return smartobject.configuration.triggers != null\r\n            }).forEach(smartobject => {\r\n                smartobject.type = \"smartobject\"\r\n                sources.push(smartobject)\r\n            })\r\n            resultProcess.data.forEach(process => {\r\n                process.type = \"process\"\r\n                process.reference = process.description\r\n                process.triggers = []\r\n                process.actions = [\r\n                    {\r\n                        id: \"process\",\r\n                        name: process.mode == \"switch\" ?  process.description_on + \"/\" + process.description_off : process.description_on,\r\n                        description: process.mode == \"switch\" ?  process.description_on + \"/\" + process.description_off : process.description_on,\r\n                        type: \"effect\",\r\n                        settings: process.inputs.map(input => {\r\n                            input.id = input.reference\r\n                            return input\r\n                        })\r\n                    }\r\n                ]\r\n                sources.push(process)\r\n            })\r\n            this.setState({ loading: false, sources: sources })\r\n        }\r\n    }\r\n\r\n\r\n    async submit() {\r\n        let settings = []\r\n\r\n        for (let index = 0; index < this.state.action.settings.length; index++) {\r\n            let setting = this.state.action.settings[index]\r\n            settings.push({\r\n                reference: setting.id,\r\n                value: this.state[this.state.action.id + \"-\" + setting.id] ? this.state[this.state.action.id + \"-\" + setting.id] : null\r\n            })\r\n        }\r\n        \r\n        let automation = {\r\n            description: this.state.description,\r\n            trigger: {\r\n                type: this.state.trigger.parentType,\r\n                object: this.state.trigger.parent,\r\n                trigger: this.state.trigger.id\r\n            },\r\n            action: {\r\n                type: this.state.action.parentType,\r\n                object: this.state.action.parent,\r\n                action: this.state.action.id,\r\n                settings: settings\r\n            }\r\n        }\r\n\r\n        let result = await new Request().post(automation).fetch(\"/api/automations\")\r\n        if (result.error) {\r\n            this.props.setMessage(result.package + \" : \" + result.message)\r\n        } else {\r\n            this.props.history.push('/automation')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Desktop {... this.props}>\r\n                    <Paper variant=\"outlined\" style={{ padding: 12, justifyContent: 'left' }}>\r\n                        <Typography variant='h6' fontWeight='bold' >New automation</Typography>\r\n                        <Typography variant='subtitle2' color=\"text.secondary\" >Do what you want when you want</Typography>\r\n                    </Paper>\r\n                </Desktop>\r\n                <Loading loading={this.state.loading}>\r\n                    <Card variant='outlined' style={{ padding: 10, marginTop: 8 }}>\r\n                        <Stepper activeStep={{ trigger: 0, action: 1, description: 2 }[this.state.step]} >\r\n                            <Step key={\"trigger\"}>\r\n                                <StepLabel>{\"Trigger\"}</StepLabel>\r\n                            </Step>\r\n                            <Step key={\"action\"}>\r\n                                <StepLabel>{\"Action\"}</StepLabel>\r\n                            </Step>\r\n                            <Step key={\"description\"}>\r\n                                <StepLabel>{\"Description\"}</StepLabel>\r\n                            </Step>\r\n                        </Stepper>\r\n                    </Card>\r\n                    <Grid container spacing={1} style={{ marginTop: 0 }} >\r\n                        <StepperProxy index={\"trigger\"} value={this.state.step} >\r\n                            {\r\n                                this.state.selected ?\r\n                                    this.state.selected.triggers.map((trigger, index) => {\r\n                                        trigger.parent = this.state.selected.id\r\n                                        trigger.parentType = this.state.selected.type\r\n                                        return (\r\n                                            <Grid key={index} item xs={12} md={12} lg={12} >\r\n                                                <Card variant='outlined'   >\r\n                                                    <CardActionArea onClick={() => { this.setState({ step: \"action\", trigger: trigger, selected: null, description: \"IF \" + trigger.name.toLowerCase() + \" THEN \" }) }} style={{ padding: 10 }} >\r\n                                                        <Typography variant='subtitle1'  >\r\n                                                            {String.capitalizeFirstLetter(trigger.name)}\r\n                                                        </Typography>\r\n                                                    </CardActionArea>\r\n                                                </Card>\r\n                                            </Grid>\r\n                                        )\r\n                                    })\r\n                                    :\r\n                                    this.state.sources.map((source, index) => {\r\n                                        if(source.triggers.length > 0) {\r\n                                            return (\r\n                                                <Grid key={index} item xs={12} md={12} lg={12} >\r\n                                                    <Card variant='outlined'   >\r\n                                                        <CardActionArea onClick={() => { this.setState({ selected: source }) }} style={{ padding: 10 }} >\r\n                                                            <Typography variant='subtitle1'  >\r\n                                                                {String.capitalizeFirstLetter(source.reference)}\r\n                                                            </Typography>\r\n                                                            {\r\n                                                                source.room &&\r\n                                                                <Typography variant='body2' color=\"text.secondary\"  >\r\n                                                                    {String.capitalizeFirstLetter(source.room.name)}\r\n                                                                </Typography>\r\n                                                            }\r\n                                                        </CardActionArea>\r\n                                                    </Card>\r\n                                                </Grid>\r\n                                            )\r\n                                        }\r\n                                    })\r\n                            }\r\n                        </StepperProxy>\r\n                        <StepperProxy index={\"action\"} value={this.state.step} >\r\n                            {\r\n                                this.state.selected ?\r\n                                    this.state.selected.actions.filter(action => {\r\n                                        return action.type == \"effect\"\r\n                                    }).map((action, index) => {\r\n                                        action.parent = this.state.selected.id\r\n                                        action.parentType = this.state.selected.type\r\n                                        return (\r\n                                            <Grid key={index} item xs={12} md={12} lg={12} >\r\n                                                <Card variant='outlined' style={{ padding: 10 }}  >\r\n                                                    <Grid container spacing={1}>\r\n                                                        <Grid item xs={6} md={11} lg={11} style={{alignSelf:'center'}}>\r\n                                                            <Typography variant='subtitle1'  >\r\n                                                                {action.name}\r\n                                                            </Typography>\r\n                                                        </Grid>\r\n                                                        <NextButton xs={6} md={1} lg={1} onClick={() => { this.setState({ step: \"description\", action: action, selected: null, description: this.state.description + action.name.toLowerCase() }) }} />\r\n                                                            {\r\n                                                                action.settings.map((setting,pIndex) => {\r\n                                                                    return <Action key={pIndex} options={setting.options} label={String.capitalizeFirstLetter(setting.id)} setState={this.setState.bind(this)} id={action.id + \"-\" + setting.id} action={setting} />\r\n                                                                })\r\n                                                            }\r\n                                                    </Grid>\r\n                                                </Card>\r\n                                            </Grid>\r\n                                        )\r\n                                    })\r\n                                    :\r\n                                    <>\r\n                                    {\r\n                                        this.state.sources.map((source, index) => {\r\n                                            let find = false\r\n                                            source.actions.forEach(action => {\r\n                                                if(action.type == \"effect\") { find = true }\r\n                                            })\r\n                                            if(find) {\r\n                                                return (\r\n                                                    <Grid key={index} item xs={12} md={12} lg={12} >\r\n                                                        <Card variant='outlined'   >\r\n                                                            <CardActionArea onClick={() => { this.setState({ selected: source }) }} style={{ padding: 10 }} >\r\n                                                                <Typography variant='subtitle1'  >\r\n                                                                    {String.capitalizeFirstLetter(source.reference)}\r\n                                                                </Typography>\r\n                                                                {\r\n                                                                    source.room &&\r\n                                                                    <Typography variant='body2' color=\"text.secondary\"  >\r\n                                                                        {String.capitalizeFirstLetter(source.room.name)}\r\n                                                                    </Typography>\r\n                                                                }\r\n                                                            </CardActionArea>\r\n                                                        </Card>\r\n                                                    </Grid>\r\n                                                )\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                    </>\r\n                                    \r\n                            }\r\n                        </StepperProxy>\r\n                        <StepperProxy index={\"description\"} value={this.state.step} >\r\n                            <Grid item xs={12} md={12} lg={12}>\r\n                                <Card variant='outlined' style={{ padding: 10, display: 'flex', alignItems: 'center' }}>\r\n                                    <Grid container spacing={1}>\r\n                                        <Grid item xs={12} md={10} lg={10}>\r\n                                            <TextField value={this.state.description} onChange={(event) => { this.setState({ description: event.nativeEvent.target.value }) }} placeholder='Description' style={{ width: '100%' }} >\r\n\r\n                                            </TextField>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} md={2} lg={2} style={{ display: 'flex', justifyContent: 'end' }}>\r\n                                            <Card variant='outlined' style={{ height: '100%', width: 'min-content' }} >\r\n                                                <CardActionArea onClick={() => { this.submit() }} style={{ padding: 8, paddingLeft: 16, paddingRight: 16, display: 'flex', height: '100%' }}>\r\n                                                    <Typography variant='subtitle1' >Submit</Typography>\r\n                                                </CardActionArea>\r\n                                            </Card>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Card>\r\n                            </Grid>\r\n                        </StepperProxy>\r\n                    </Grid>\r\n                </Loading>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default NewAutomation\r\n\r\n//"],"names":["StepperProxy","props","index","value","children","variant","style","width","marginTop","alignContent","justifyContent","alignSelf","to","borderRadius","NewAutomation","state","loading","processes","sources","selected","trigger","triggers","step","description","setTitle","setActionType","Request","get","fetch","result","resultProcess","error","this","setMessage","package","message","history","push","data","filter","smartobject","configuration","forEach","type","process","reference","actions","id","name","mode","description_on","description_off","settings","inputs","map","input","setState","action","length","setting","automation","parentType","object","parent","post","padding","fontWeight","color","activeStep","container","spacing","item","xs","md","lg","onClick","toLowerCase","String","capitalizeFirstLetter","source","room","pIndex","options","label","bind","find","display","alignItems","onChange","event","nativeEvent","target","placeholder","height","submit","paddingLeft","paddingRight","React"],"sourceRoot":""}