{"version":3,"file":"static/js/862.ce2d1567.chunk.js","mappings":"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","sources":["screens/contents/Process/Detail.js","../node_modules/@mui/icons-material/esm/Delete.js","../node_modules/@mui/icons-material/esm/RadioButtonChecked.js","../node_modules/@mui/icons-material/esm/ToggleOff.js","../node_modules/@mui/icons-material/esm/ToggleOn.js"],"sourcesContent":["import React from 'react'\r\nimport JSONPretty from 'react-json-pretty'\r\n\r\nimport { Grid, Switch, ListItem, FormControlLabel, Card, CardActionArea, IconButton, TableHead, TextField, Typography, Paper, Divider, TableBody, TableContainer, TableCell, Table, TableRow, FormControl, Select, Button } from '@mui/material'\r\n\r\nimport { ToggleOff, Close, Delete, Autorenew, ToggleOn, RadioButtonChecked } from '@mui/icons-material'\r\n\r\nimport Alert from '../../../components/Alert'\r\nimport Action from '../../../components/Action'\r\nimport Desktop from '../../../components/Desktop'\r\nimport Request from '../../../utils/Request'\r\nimport Source from '../../../utils/Source'\r\nimport DeleteButton from '../../../components/views/DeleteButton'\r\nimport Loading from '../../../components/Loading'\r\n\r\nclass DetailProcess extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            id: props.match.params.id,\r\n            process: {\r\n                state: \"\",\r\n                mode: \"\",\r\n                description: \"\",\r\n                description_on: \"\",\r\n                description_off: \"\",\r\n                inputs: [],\r\n                profiles: []\r\n            },\r\n            profiles: [],\r\n            executeInformation: \"\",\r\n            referenceInput: \"\",\r\n            nameInput: \"\",\r\n            typeInput: \"\",\r\n            modeInput: 0,\r\n            action: \"\",\r\n            source: \"\",\r\n            loading: true,\r\n            isChecked: false,\r\n            sources: []\r\n        }\r\n        props.setTitle(\"Process\")\r\n        props.setActionType(\"return\")\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        let resultProfile = await new Request().get().fetch(\"/api/profiles\")\r\n        let result = await new Request().get().fetch(\"/api/processes/\" + this.state.id)\r\n        if (result.error) {\r\n            this.props.setMessage(result.package + \" : \" + result.message)\r\n            this.props.history.push('/process')\r\n        } else {\r\n            this.setState({\r\n                process: result.data,\r\n                profiles: resultProfile.data,\r\n                loading: false\r\n            })\r\n        }\r\n    }\r\n\r\n    setSource(id) {\r\n        let fSource = false\r\n        this.state.sources.forEach(source => {\r\n            if (source.id === id) { fSource = source }\r\n        })\r\n        this.setState({ source: fSource })\r\n    }\r\n\r\n    setAction(id) {\r\n        let fAction = false\r\n        this.state.source.actions.forEach(action => {\r\n            if (action.id === id) { fAction = action }\r\n        })\r\n        this.setState({ action: fAction })\r\n    }\r\n\r\n\r\n    async delete(id) {\r\n        let result = await new Request().delete().fetch(\"/api/processes/\" + id)\r\n        if (result.error) {\r\n            this.props.setMessage(result.package + \" : \" + result.message)\r\n        } else {\r\n            this.props.history.push('/process')\r\n        }\r\n    }\r\n\r\n    async executeAction() {\r\n        this.setState({ loading: true })\r\n        let resetState = {}\r\n        let tmp = {}\r\n        for (let index = 0; index < this.state.process.inputs.length; index++) {\r\n            let input = this.state.process.inputs[index];\r\n            let value = this.state[input.id]\r\n            resetState[input.id] = null\r\n            if (value) {\r\n                tmp[input.reference] = value\r\n            } else {\r\n                tmp[input.reference] = null\r\n            }\r\n        }\r\n        let result = await new Request().post({ inputs: tmp }).fetch(\"/api/processes/\" + this.state.process.id + \"/execute\")\r\n        if (result.error) {\r\n            this.setState({ loading: false })\r\n            this.props.setMessage(result.package + \" : \" + result.message)\r\n        } else {\r\n            this.setState(resetState)\r\n            if (result.data) {\r\n                this.setState({ executeInformation: JSON.stringify(result.data) })\r\n            }\r\n            this.componentDidMount()\r\n        }\r\n    }\r\n\r\n    async insertProfile(process, profile) {\r\n        let result = await new Request().post({ idProfile: profile.id, }).fetch(\"/api/processes/\" + process.id + \"/profiles\")\r\n        if (result.error) {\r\n            this.props.setMessage(result.package + \" : \" + result.message)\r\n        } else {\r\n            this.componentDidMount()\r\n        }\r\n    }\r\n\r\n    async deleteProfile(process, profile) {\r\n        let result = await new Request().delete().fetch(\"/api/processes/\" + process.id + \"/profiles/\" + profile.id)\r\n        if (result.error) {\r\n            this.props.setMessage(result.package + \" : \" + result.message)\r\n        } else {\r\n            this.componentDidMount()\r\n        }\r\n    }\r\n\r\n\r\n    updateAction(action, value) {\r\n        let tmp = {}\r\n        tmp[action.id] = value\r\n        this.setState(tmp)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Desktop {... this.props}>\r\n                    <Paper variant=\"outlined\" style={{ padding: 12, justifyContent: 'left' }}>\r\n                        <Typography variant='h6' fontWeight='bold' >Process</Typography>\r\n                        <Typography variant='subtitle2' color=\"text.secondary\" >Do multiple action at once</Typography>\r\n                    </Paper>\r\n                </Desktop>\r\n                <Loading loading={this.state.loading}>\r\n                    <Grid container spacing={1} style={{ marginTop: 0 }}>\r\n                        <Grid item xs={12} md={8} lg={9}>\r\n                            <Card variant='outlined' style={{ padding: 12 }}>\r\n                                <Typography variant='subtitle1'>{String.capitalizeFirstLetter(this.state.process.description)}</Typography>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={4} lg={3}>\r\n                            <Card elevation={3} >\r\n                                <Button variant='contained' onClick={() => { this.executeAction() }} style={{ width: '100%', padding: 10, flexDirection: 'row', display: 'flex' }}>\r\n                                    {\r\n                                        this.state.process.mode == \"button\" ?\r\n                                            <RadioButtonChecked fontSize='large' style={{ marginRight: 16 }} /> :\r\n\r\n                                            this.state.process.state == \"on\" ?\r\n                                                <ToggleOn fontSize='large' style={{ marginRight: 16 }} />\r\n                                                :\r\n                                                <ToggleOff fontSize='large' style={{ marginRight: 16 }} />\r\n                                    }\r\n                                    {\r\n                                        this.state.process.mode == \"button\" ?\r\n                                            <Typography textAlign='center' variant='subtitle1'>{String.capitalizeFirstLetter(this.state.process.description_on)}</Typography>\r\n                                            :\r\n                                            this.state.process.state == \"on\" ?\r\n                                                <Typography textAlign='center' variant='subtitle1'>{String.capitalizeFirstLetter(this.state.process.description_on)}</Typography>\r\n                                                :\r\n                                                <Typography textAlign='center' variant='subtitle1'>{String.capitalizeFirstLetter(this.state.process.description_off)}</Typography>\r\n                                    }\r\n                                </Button>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={9} lg={9}>\r\n                            <Card variant='outlined' style={{ padding: 12 }}>\r\n                                <Grid container spacing={1}>\r\n                                    {\r\n                                        this.state.process.inputs.filter(input => input.state == this.state.process.state).length == 0 ?\r\n                                            <Grid item xs={12} md={12} lg={12}>\r\n                                                <Typography variant='subtitle1' color=\"text.secondary\" >No input</Typography>\r\n                                            </Grid>\r\n                                            :\r\n                                            this.state.process.inputs.filter(input => input.state == this.state.process.state).map((input, index) => {\r\n                                                return (\r\n                                                    <Grid item xs={12} md={6} lg={4}>\r\n                                                        <Action options={input.options} label={String.capitalizeFirstLetter(input.reference.split(\"_\")[0])} setState={this.setState.bind(this)} id={input.id} action={input} />\r\n                                                    </Grid>\r\n                                                )\r\n                                            })\r\n                                    }\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={3} lg={3}>\r\n                            <Card variant='outlined' style={{ padding: 12 }}>\r\n                                {\r\n                                    this.state.profiles.map((profile, index) => {\r\n                                        let state = false\r\n                                        this.state.process.profiles.forEach(pprofile => {\r\n                                            if (pprofile.profile == profile.id) {\r\n                                                state = true\r\n                                            }\r\n                                        })\r\n                                        return (\r\n                                            <ListItem key={index} style={{ padding: 1 }}  >\r\n                                                <FormControlLabel control={\r\n                                                    <Switch\r\n                                                        checked={state}\r\n                                                        onChange={() => {\r\n                                                            state ? this.deleteProfile(this.state.process, profile) : this.insertProfile(this.state.process, profile)\r\n                                                        }}\r\n                                                        color=\"primary\"\r\n                                                    />\r\n                                                } label={profile.name} />\r\n                                            </ListItem>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <DeleteButton onClick={() => { this.delete(this.state.process.id) }} />\r\n                </Loading>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DetailProcess","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'RadioButtonChecked');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M17 7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h10c2.76 0 5-2.24 5-5s-2.24-5-5-5zM7 15c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3z\"\n}), 'ToggleOff');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M17 7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h10c2.76 0 5-2.24 5-5s-2.24-5-5-5zm0 8c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3z\"\n}), 'ToggleOn');"],"names":["DetailProcess","props","state","id","match","params","process","mode","description","description_on","description_off","inputs","profiles","executeInformation","referenceInput","nameInput","typeInput","modeInput","action","source","loading","isChecked","sources","setTitle","setActionType","Request","get","fetch","resultProfile","this","result","error","setMessage","package","message","history","push","setState","data","fSource","forEach","fAction","actions","delete","resetState","tmp","index","length","input","value","reference","post","JSON","stringify","componentDidMount","profile","idProfile","Desktop","Paper","variant","style","padding","justifyContent","Typography","fontWeight","color","Loading","Grid","container","spacing","marginTop","item","xs","md","lg","Card","String","capitalizeFirstLetter","elevation","Button","onClick","executeAction","width","flexDirection","display","RadioButtonChecked","fontSize","marginRight","ToggleOn","ToggleOff","textAlign","filter","map","Action","options","label","split","bind","pprofile","ListItem","FormControlLabel","control","Switch","checked","onChange","deleteProfile","insertProfile","name","DeleteButton","React","createSvgIcon","_jsx","d"],"sourceRoot":""}