"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _expressValidator=require("express-validator"),_Result=_interopRequireDefault(require("../utils/Result")),_package=_interopRequireDefault(require("../package.json"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}var _default=(a,b)=>{//Get all rapports
//Get one rapport
//Get all data
//Insert new rapport
//Delete rapport
//Truncate data rapport
//Insert new rapport data
a.get("/api/rapports",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/rapports";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.rapport.getAll())}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.get("/api/rapports/:idRapport",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/rapports/:idRaport";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.rapport.getOne(a.params.idRapport))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.get("/api/rapports/:idRapport/data/:start/:end",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/rapports/:idRapport";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.rapport.getData(a.params.idRapport,a.params.start,a.params.end))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/rapports",(0,_expressValidator.body)("chart").isIn(["lineChart"]).withMessage("Invalid chart"),(0,_expressValidator.body)("type").isIn(["smartobject","module"]).withMessage("Invalid type"),(0,_expressValidator.body)("object").notEmpty().not().isObject().not().isArray().withMessage("Invalid object"),(0,_expressValidator.body)("reference").isString().withMessage("Invalid reference"),(0,_expressValidator.body)("interval").isNumeric().withMessage("Invalid interval {min:120}"),(0,_expressValidator.body)("settings").isArray().withMessage("Invalid settings"),async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/rapports";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.rapport.insert(a.body))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.delete("/api/rapports/:idRapport",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/rapports/:idRapport";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.rapport.delete(a.params.idRapport))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.patch("/api/rapports/:idRapport",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/rapports/:idRapport";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.rapport.truncate(a.params.idRapport))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/rapports/:idRapport/data",(0,_expressValidator.body)("value").notEmpty().withMessage("Invalid value"),async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/rapports/:idRapport/data";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.rapport.insertData(a.params.idRapport,a.body.value))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))})};exports.default=_default,module.exports=exports.default;