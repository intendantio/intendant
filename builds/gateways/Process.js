"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _expressValidator=require("express-validator"),_Result=_interopRequireDefault(require("../utils/Result")),_package=_interopRequireDefault(require("../package.json"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}var _default=(a,b)=>{//Get all process
//Insert new porcess
//Get one process
//Delete process
// Execute action
// Insert process profiles
// Delete process profiles
a.get("/api/processes",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/processes";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.process.getAll())}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/processes",(0,_expressValidator.body)("description").isString().withMessage("Invalid description"),(0,_expressValidator.body)("description_on").isString().withMessage("Invalid description_on"),(0,_expressValidator.body)("description_off").isString().withMessage("Invalid description_off"),(0,_expressValidator.body)("mode").isIn(["button","switch"]).withMessage("Invalid mode"),(0,_expressValidator.body)("room").isNumeric().withMessage("Invalid room"),(0,_expressValidator.body)("state").isIn(["on","off"]).withMessage("Invalid state"),(0,_expressValidator.body)("actions").isArray().withMessage("Invalid actions"),(0,_expressValidator.body)("inputs").isArray().withMessage("Invalid inputs"),async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/processes";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.process.insert(a.body))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.get("/api/processes/:idProcess",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/processes/:idProcess";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.process.getOne(a.params.idProcess))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.delete("/api/processes/:idProcess",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/processes/:idProcess";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.process.delete(a.params.idProcess))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/processes/:id/execute",(0,_expressValidator.body)("inputs").isObject().withMessage("Invalid inputs"),async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/processes/:idprocess/execute";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.process.executeAction(a.params.id,a.body.inputs,d.data.idProfile))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/processes/:idProcess/profiles",(0,_expressValidator.body)("idProfile").isNumeric().withMessage("Invalid idProfile"),async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/processes/:idProcess/profiles";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.process.insertProcessProfile(a.params.idProcess,a.body.idProfile))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.delete("/api/processes/:idProcess/profiles/:idProfile",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/processes/:idProcess/profiles/:idProfile";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.process.deleteProcessProfile(a.params.idProcess,a.params.idProfile))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))})};exports.default=_default,module.exports=exports.default;