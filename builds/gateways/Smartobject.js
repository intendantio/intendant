"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _expressValidator=require("express-validator"),_Result=_interopRequireDefault(require("../utils/Result")),_package=_interopRequireDefault(require("../package.json"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}var _default=(a,b)=>{//Get all smartobject
//Get one smartobject
//Insert smartobject 
// Delete smartobject
// Execute one action 
//Update rooms
//Update reference
a.get("/api/smartobjects",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/smartobjects";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.smartobject.getAll())}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.get("/api/smartobjects/:idSmartobject",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/smartobjects/:idSmartobject";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.smartobject.getOne(a.params.idSmartobject))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/smartobjects",(0,_expressValidator.body)("module").isString().withMessage("Invalid module"),(0,_expressValidator.body)("reference").isString().withMessage("Invalid reference"),(0,_expressValidator.body)("room").isNumeric().withMessage("Invalid room"),(0,_expressValidator.body)("settings").isArray().withMessage("Invalid settings"),async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/smartobjects";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.smartobject.insert(a.body.reference,a.body.module,a.body.room,a.body.settings))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.delete("/api/smartobjects/:idSmartobject",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/smartobjects/:idSmartobject";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.smartobject.delete(a.params.idSmartobject))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/smartobjects/:idSmartobject/actions/:idAction",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/smartobjects/:id/actions/:idAction";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.smartobject.executeAction(a.params.idSmartobject,a.params.idAction,a.body.settings,d.data.idProfile))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.patch("/api/smartobjects",(0,_expressValidator.body)("package").isString().withMessage("Invalid package"),async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/smartobjects";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.smartobject.install(a.body.package))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/smartobjects/:idSmartobject/room",(0,_expressValidator.body)("idRoom").isNumeric().withMessage("Invalid room"),async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/smartobjects/:idSmartobject/room";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.smartobject.updateRoom(a.params.idSmartobject,a.body.idRoom))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/smartobjects/:idSmartobject/reference",(0,_expressValidator.body)("reference").isString().withMessage("Invalid reference"),async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/smartobjects/:idSmartobject/reference";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.smartobject.updateReference(a.params.idSmartobject,a.body.reference))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))})};exports.default=_default,module.exports=exports.default;