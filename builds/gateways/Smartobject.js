"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _expressValidator=require("express-validator"),_Result=_interopRequireDefault(require("../utils/Result")),_package=_interopRequireDefault(require("../package.json"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}var _default=(a,b)=>{//Get all smartobject
//Get all smartobject
//Get one smartobject
//Insert smartobject 
// Delete smartobject
//Insert smartobject settings
//Delete smartobject arguments
// Execute one action 
//TODO Rework
// Insert smartobject profiles
// Delete smartobject profiles
//Update rooms
a.get("/api/smartobjects",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/smartobjects";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.smartobject.getAll())}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.get("/api/smartobjects/configuration",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/smartobjects/configuration";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.smartobject.getAllConfiguration())}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.get("/api/smartobjects/:idSmartobject",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/smartobjects/:idSmartobject";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.smartobject.getOne(a.params.idSmartobject))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/smartobjects",(0,_expressValidator.body)("module").isString().withMessage("Invalid module"),(0,_expressValidator.body)("reference").isString().withMessage("Invalid reference"),(0,_expressValidator.body)("room").isNumeric().withMessage("Invalid room"),(0,_expressValidator.body)("settings").isArray().withMessage("Invalid settings"),async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/smartobjects";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.smartobject.insert(a.body))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.delete("/api/smartobjects/:idSmartobject",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/smartobjects/:idSmartobject";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.smartobject.delete(a.params.idSmartobject))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/smartobjects/:idSmartobject/arguments",(0,_expressValidator.body)("value").isString().withMessage("Invalid value"),(0,_expressValidator.body)("reference").isString().withMessage("Invalid reference"),async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/smartobjects/:idSmartobject/arguments";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.smartobject.insertArguments(a.params.idSmartobject,a.body))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.delete("/api/smartobjects/:idSmartobject/arguments/:idArgument",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/smartobjects/:idSmartobject/arguments/:idArgument";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.smartobject.deleteArguments(a.params.idArgument,a.params.idSmartobject))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/smartobjects/:idSmartobject/actions/:idAction",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/smartobjects/:id/actions/:idAction";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.smartobject.executeAction(a.params.idSmartobject,a.params.idAction,d.profile,a.body.settings,!1,d.user))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/smartobjects/:idSmartobject/profiles",(0,_expressValidator.body)("idProfile").isNumeric().withMessage("Invalid profile"),async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/smartobjects/:idSmartobject/profiles";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.smartobject.insertSmartobjectProfile(a.params.idSmartobject,a.body.idProfile))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.delete("/api/smartobjects/:idSmartobject/profiles/:idProfile",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/smartobjects/:idSmartobject/profiles/:idProfile";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.smartobject.deleteSmartobjectProfile(a.params.idSmartobject,a.params.idProfile))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/smartobjects/:idSmartobject/room",(0,_expressValidator.body)("idRoom").isNumeric().withMessage("Invalid room"),async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/smartobjects/:idSmartobject/room";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.smartobject.updateRoom(a.params.idSmartobject,a.body.idRoom))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))})};exports.default=_default,module.exports=exports.default;