"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _expressValidator=require("express-validator"),_Result=_interopRequireDefault(require("../utils/Result")),_package=_interopRequireDefault(require("../package.json"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}var _default=(a,b)=>{//Get all automation
//Get one automation
//Insert one automation
//Delete one widget
a.get("/api/automations",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/automations";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.automation.getAll())}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.get("/api/automations/:idAutomation",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/automations/:idAutomation";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.automation.getOne(a.params.idAutomation))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/automations",(0,_expressValidator.body)("description").isString().withMessage("Invalid description"),(0,_expressValidator.body)("trigger").isObject().withMessage("Invalid state"),(0,_expressValidator.body)("action").isObject().withMessage("Invalid action"),async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/automations";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.automation.insert(a.body.description,a.body.trigger,a.body.action))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.delete("/api/automations/:idAutomation",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/automations/:idAutomation";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.automation.delete(a.params.idAutomation))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))})};exports.default=_default,module.exports=exports.default;