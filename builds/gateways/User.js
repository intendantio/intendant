"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _expressValidator=require("express-validator"),_Result=_interopRequireDefault(require("../utils/Result")),_package=_interopRequireDefault(require("../package.json"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}var _default=(a,b)=>{a.get("/api/users",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/users";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.user.getAll())}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.get("/api/users/:idUser",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/users/:idUser";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.user.getOne(a.params.idUser))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/users",(0,_expressValidator.body)("login").isString().isLength({min:5}).withMessage("Invalid login {min: 5}"),(0,_expressValidator.body)("password").isStrongPassword({minLength:8,minLowercase:1,minUppercase:1,minNumbers:1}).withMessage("Invalid password {minLength: 8, minLowercase: 1, minUppercase: 1, minNumbers: 1}"),(0,_expressValidator.body)("imei").isString().withMessage("Invalid imei"),(0,_expressValidator.body)("profile").isNumeric().withMessage("Invalid profile"),async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/users";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.user.insert(a.body))}else{let a=d.array({onlyFirstError:!0}).pop();c.send(new _Result.default(_package.default.name,!0,a.msg))}}),a.delete("/api/users/:idUser",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/users/:idUser";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.user.delete(a.params.idUser))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/users/:idUser/password",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/users/:idUser/password";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.user.updatePassword(a.params.idUser,a.body.password))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/users/:idUser/profile",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/users/:idUser/profile";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.user.updateProfile(a.params.idUser,a.body.profile))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))})};exports.default=_default,module.exports=exports.default;