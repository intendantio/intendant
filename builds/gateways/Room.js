"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _expressValidator=require("express-validator"),_Result=_interopRequireDefault(require("../utils/Result")),_package=_interopRequireDefault(require("../package.json"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}var _default=(a,b)=>{//Get all rooms
//Get one rooms
//Insert rooms
// Execute action by room
//TODO Rework
//Delete rooms
// Insert room profiles
// Delete room profiles
a.get("/api/rooms",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/rooms";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.room.getAll())}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.get("/api/rooms/:idRoom",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/rooms/:idRoom";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.room.getOne(a.params.idRoom))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/rooms",(0,_expressValidator.body)("name").isString().withMessage("Invalid name"),(0,_expressValidator.body)("description").isString().withMessage("Invalid description"),(0,_expressValidator.body)("icon").isString().withMessage("Invalid icon"),async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/rooms";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.room.insert(a.body))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/rooms/:idRoom/actions/:idAction",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/rooms/:idRoom/actions/:idAction";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.room.executeAction(a.params.idRoom,a.params.idAction,a.body.settings))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.delete("/api/rooms/:idRoom",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/rooms/:idRoom";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.room.delete(a.params.idRoom))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/rooms/:idRoom/profiles",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/rooms/:idRoom/profiles";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.room.insertRoomProfile(a.params.idRoom,a.body.idProfile))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.delete("/api/rooms/:idRoom/profiles/:idProfile",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/rooms/:idRoom/profiles/:idProfile";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.room.deleteRoomProfile(a.params.idRoom,a.params.idProfile))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))})};exports.default=_default,module.exports=exports.default;