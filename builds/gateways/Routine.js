"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _expressValidator=require("express-validator"),_Result=_interopRequireDefault(require("../utils/Result")),_package=_interopRequireDefault(require("../package.json"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}var _default=(a,b)=>{//Get all routine
//Get one routine
//Insert one routine
//Delete one widget
//Update one routine
//Update status
//Duplicate
a.get("/api/routines",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/routines";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.routine.getAll())}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.get("/api/routines/:idRoutine",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/routines/:idRoutine";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.routine.getOne(a.params.idRoutine))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/routines",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/routines";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.routine.insert(a.body.name,a.body.icon,a.body.watch,a.body.triggers,a.body.effects,a.body.mode))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.delete("/api/routines/:idRoutine",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/routines/:idRoutine";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.routine.delete(a.params.idRoutine))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.put("/api/routines/:idRoutine",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/routines/:idRoutine";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.routine.update(a.params.idRoutine,a.body.name,a.body.icon,a.body.watch,a.body.triggers,a.body.effects,a.body.mode))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.put("/api/routines/:idRoutine/status",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/routines/:idRoutine/status";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.routine.updateStatus(a.params.idRoutine,a.body.status))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.put("/api/routines/:idRoutine/duplicate",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/routines/:idRoutine/duplicate";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.routine.duplicate(a.params.idRoutine))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))})};exports.default=_default,module.exports=exports.default;