"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _expressValidator=require("express-validator"),_Result=_interopRequireDefault(require("../utils/Result")),_package=_interopRequireDefault(require("../package.json"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}var _default=(a,b)=>{//Get all widget
//Get one widget
//Insert widget
//Delete widget
a.get("/api/widgets",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/widgets";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.widget.getAll())}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.get("/api/widgets/:idWidget",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/widgets/:idWidget";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.widget.getOne(a.params.idWidget))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))}),a.post("/api/widgets",(0,_expressValidator.body)("reference").isString().isLength({min:5}).withMessage("Invalid reference {min: 5}"),(0,_expressValidator.body)("type").isIn(["module","smartobject"]).withMessage("Invalid type"),(0,_expressValidator.body)("object").isString().withMessage("Invalid object"),(0,_expressValidator.body)("settings").isArray().withMessage("Invalid settings"),async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/widgets";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.widget.insert(a.body.reference,a.body.object,a.body.type,a.body.settings))}else{let a=d.array({onlyFirstError:!0}).pop();c.send(new _Result.default(_package.default.name,!0,a.msg))}}),a.delete("/api/widgets/:idWidget",async(a,c)=>{let d=(0,_expressValidator.validationResult)(a);if(d.isEmpty()){a.url="/widgets/:idWidget";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.widget.delete(a.params.idWidget))}else c.send(new _Result.default(_package.default.name,!0,d.array({onlyFirstError:!0}).pop().msg))})};exports.default=_default,module.exports=exports.default;