"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default=(a,b)=>{//Get all espace
//Get all process
//Insert new porcess
//Get one process
//Delete process
//Insert new process action
//Delete process action
//Insert process inputs
//Delete process inputs
// Execute action
// Insert process profiles
// Delete process profiles
a.get("/api/espace",async(a,c)=>{a.url="/espace";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.espace.getAll())}),a.get("/api/process",async(a,c)=>{a.url="/process";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.process.getAll())}),a.post("/api/process",async(a,c)=>{a.url="/process";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.process.insert(a.body.reference,a.body.name,a.body.nameEnable,a.body.nameDisable,a.body.description,a.body.espace,a.body.icon,a.body.mode,a.body.sources,a.body.inputs))}),a.get("/api/process/:idProcess",async(a,c)=>{a.url="/espace/:id/process/:idProcess";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.process.getOne(a.params.idProcess))}),a.delete("/api/process/:idProcess",async(a,c)=>{a.url="/process/:idProcess";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.process.delete(a.params.idProcess))}),a.post("/api/process/:idProcess/actions",async(a,c)=>{a.url="/process/:idProcess/actions";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.process.insertAction(a.params.idProcess,a.body.source,a.body.action,a.body.enable,a.body.arguments))}),a.delete("/api/process/:idProcess/actions/:idAction",async(a,c)=>{a.url="/process/:idProcess/actions/:idAction";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.process.deleteAction(a.params.idProcess,a.params.idAction))}),a.post("/api/process/:idProcess/inputs",async(a,c)=>{a.url="/process/:idProcess/inputs";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.process.insertInput(a.params.idProcess,a.body.reference,a.body.name,a.body.type,a.body.enable))}),a.delete("/api/process/:idProcess/inputs/:idInput",async(a,c)=>{a.url="/process/:idProcess/inputs/:idInput";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.process.deleteInput(a.params.idProcess,a.params.idInput))}),a.post("/api/process/:id/execute",async(a,c)=>{a.url="/process/:idprocess/execute";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.process.executeAction(a.params.id,d.profile,a.body.inputs))}),a.post("/api/process/:idProcess/profiles",async(a,c)=>{a.url="/api/process/:idProcess/profiles";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.process.insertProcessProfile(a.params.idProcess,a.body.idProfile))}),a.delete("/api/process/:idProcess/profiles/:idProfile",async(a,c)=>{a.url="/api/process/:idProcess/profiles/:idProfile";let d=await b.controller.authentification.checkAuthorization(a);d.error?c.send(d):c.send(await b.controller.process.deleteProcessProfile(a.params.idProcess,a.params.idProfile))})};exports.default=_default,module.exports=exports.default;