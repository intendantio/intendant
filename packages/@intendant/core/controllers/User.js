"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _Math=_interopRequireDefault(require("./tools/Math")),_md=_interopRequireDefault(require("md5")),_Controller=_interopRequireDefault(require("./Controller")),_package=_interopRequireDefault(require("../package.json"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}class User extends _Controller.default{async getOne(a){return await this.sqlUser.getOne(a)}async getAll(){let a=await this.sqlUser.getAll();if(!1==a.error){let b=a.data.map(a=>(a.password="",a));a.data=b}return a}async delete(a){let b=await this.sqlUser.getOne(a);if(b.error)return b;if(!1==b.data)return this.core.logger.warning(_package.default.name,"User not found"),{error:!0,message:"User invalid",code:_package.default.name+">User>NotFound"};if("admin"==b.data.login)return this.core.logger.warning(_package.default.name,"Cannot delete admin"),{error:!0,message:"Cannot delete admin",code:_package.default.name+">User>CantAdmin"};let c=this.sqlClient.deleteAllByField({user:a});if(c.error)return c;let d=this.sqlUser.deleteAllByField({id:a});return d.error?d:{error:!1,message:"",code:"ok"}}async insert(a,b,c="2"){if(!(a&&""!==a))return this.core.logger.warning(_package.default.name,"Login is empty"),{error:!0,message:"Login is empty",code:"authentification-login-empty"};if(b&&""!==b){let d=await this.sqlUser.getOneByField({login:a});if(d.error)return d;else{let e=d.data;if(e)return this.core.logger.warning(_package.default.name,"Login is already register"),{error:!0,message:"Login is already register",code:"authentification-already-register"};else{this.core.logger.verbose(_package.default.name,"Insert user "+a);let d=_Math.default.random(16),e=(0,_md.default)(b+d),f=await this.sqlUser.insert({id:null,login:a,password:e,salt:d,profile:c});return f.error?f:{error:!1,message:"",code:"ok"}}}}else return this.core.logger.warning(_package.default.name,"Password is empty"),{error:!0,message:"Password is empty",code:"authentification-password-empty"}}async insertAdmin(a){let b=await this.getStarted();return b.getStarted?a&&"string"==typeof a&&4<=a.length?this.insert("admin",a,"1"):{error:_package.default.name+">Missing>Password",message:"Missing password"}:{error:_package.default.name+">Invalid>CycleState",message:"Invalid cycle state"}}async update(a,b,c){if(b){if(c){let d=await this.sqlUser.getOne(a);if(d.error)return d;let e=d.data;if(e.login!=b){let c=this.sqlUser.updateAll({login:b},{id:a});if(c.error)return d}if(e.profile!=c){let b=this.sqlUser.updateAll({profile:c},{id:a});if(b.error)return d}return{error:!1,message:"",code:"ok"}}return{error:_package.default.name+">Missing>Profile",message:"Missing profile"}}return{error:_package.default.name+">Missing>Login",message:"Missing login"}}async updatePassword(a,b){let c=_Math.default.random(16),d=await this.sqlUser.updateAll({password:(0,_md.default)(b+c)},{id:a});if(d.error)return d;else{let b=await this.sqlUser.updateAll({salt:c},{id:a});return b.error?b:{error:!1,message:"",code:"ok"}}}async getStarted(){let a=await this.sqlUser.getOneByField({login:"admin"});return a.error?a:!1==a.data?{error:!1,message:"",getStarted:!0}:{error:!1,message:"",getStarted:!1}}}var _default=User;exports.default=_default,module.exports=exports.default;